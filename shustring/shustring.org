#+begin_src latex
  \section*{Introduction}
  Molecular markers are regions of DNA or protein sequences that are
  diagnostic for a given organism. To find such regions, it can be
  instructive to search for shortest unique substrings, or
  shustrings~\cite{hau05:gen}. Consider, for example the sequence
  \[
  t=\texttt{TATTTTTATA}
  \]
  consisting of ten nucleotides. At every position in $t$ we ask, what
  is the shortest unique substring starting there? Consider the first
  nucleotide in $t$, $t[1...1]=\texttt{T}$ is not unique, nor is
  $t[1...2]=\texttt{TA}$ or $t[1...3]=\texttt{TAT}$, but
  $t[1...4]=\texttt{TATT}$ is. Since all extensions of \texttt{TATT},
  such as $t[1...5]=\texttt{TATTT}$, $t[1...6]=\texttt{TATTTT}$, and so
  on, are also unique, we call \texttt{TATT} \emph{shortest} unique, a
  shustring.

  Table~\ref{tab:shu} shows the shustring lengths, $\shu[i]$ and the
  actual shustrings of $t$. They are a compact representation of a
  sequence's marker content, because, as we just said, once unique,
  always unique.

  \begin{table}
    \caption{Shustrings starting at every position in $t=\texttt{TATTTTTATA}$.}\label{tab:shu}
      \begin{center}
	\begin{tabular}{ccl}\hline
	  $i$ & $\shu[i]$ & $\mathrm{shustring}[i]$\\\hline
	  1 & 4 & \texttt{TATT}\\
	  2 & 3 & \texttt{ATT}\\
	  3 & 5 & \texttt{TTTTT}\\
	  4 & 5 & \texttt{TTTTA}\\
	  5 & 4 & \texttt{TTTA}\\
	  6 & 3 & \texttt{TTA}\\
	  7 & 4 & \texttt{TATA}\\
	  8 & 3 & \texttt{ATA}\\\hline
	\end{tabular}
      \end{center}
  \end{table}

  Shustrings are found using the enhanced suffix array of $t$. This
  usually consists of two tables, the \emph{suffix array} of
  alphabetically ordered suffixes, $\sa$, and the longest common prefix
  array of the lengths of matching, $\lcp$. We augment these two with a
  third array, the inverse suffix array, $\isa$, to map positions in $t$
  onto positions in $\sa$.

  \begin{table}
    \caption{Enhanced suffix array of
      $t=\texttt{TATTTTTATA}$.}\label{tab:esa}
    \begin{center}
      \begin{tabular}{ccccl}
	\hline
	$i$ & $\sa[i]$ & $\lcp[i]$ & $\isa[i]$ & $\suf[i]$\\\hline
	\input{esa}
      \end{tabular}
    \end{center}
  \end{table}

  As shown in Table~\ref{tab:esa}, the enhanced suffix array of $t$
  consists of three columns of integers, where $\sa$ and $\isa$ refer to
  the starting positions and $\lcp$ to the lengths of strings. However,
  it is easier to think about strings by looking at them than by
  contemplating numbers, hence Table~\ref{tab:esa} also shows the
  suffixes, $\suf$, of $t$. As I just said, their starting positions are
  in $\sa$. The lengths of the prefixes matching between $\suf[i]$ and
  $\suf[i-1]$ are in $\lcp[i]$. And $\isa$ stores the positions of
  suffixes in text-order. For example, the first suffix in $t$,
  $t[1...]$, is located at $\isa[1]=6$, the second suffix, $t[2...]$, at
  $\isa[2]=3$, and so on. In other words,
  \begin{equation}\label{eq:isa}
    \isa[\sa[i]]=i.
  \end{equation}

  From the enhanced suffix array in Table~\ref{tab:esa}, we can look up
  the shustring lengths in Table~\ref{tab:shu} as the $\lcp$-value of
  the corresponding suffix, or that of its right-hand neighbor,
  whichever is larger. And since the $\lcp$-values are the lengths of
  right-maximal repeats, extending them by one creates shsutrings. To
  summarize,
  \begin{equation}\label{eq:shu}
  \shu[i] = \mbox{max}\left(\lcp\left[\isa[i]\right],\lcp\left[isa[i]+1\right]\right) + 1.
  \end{equation}
  For example, to compute $\shu[1]$, we write
  \begin{eqnarray*}
    \shu[1] & = &
    \mbox{max}\left(\lcp\left[\isa[1]\right],\lcp\left[\isa[1]+1\right]\right)
    + 1\\
    & = & \mbox{max}\left(\lcp[6],\lcp[7]\right)+1\\
    & = & \mbox{max}(3, 1) + 1\\
    & = & 4.
  \end{eqnarray*}

  Given the shustrings of $t$, we can ask, how long are the shortest
  shustrings? Table~\ref{tab:shu} tells us that's 3, and there are three
  of them, \texttt{ATT}, \texttt{TTA}, and \texttt{ATA}. We call such
  shortest shustrings \emph{global}, to distinguish them from the
  containing set of all shustrings, which we call \emph{local}. The
  program \texttt{shustring} computes either global or local shustrings
  for an arbitrary set of sequences.

  \section*{Implementation}
  The outline of \texttt{shustring} has hooks for imports, functions,
  and the logic of the main function.
#+end_src
#+begin_src go <<shustring.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:shu}>>
  )
  //<<Functions, Ch.~\ref{ch:shu}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:shu}>>
  }
#+end_src
#+begin_src latex
  In the main function we prepare the \ty{log} package, set the usage,
  declare and parse the options, and parse the input files.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:shu}>>=
  util.PrepLog("shustring")
  //<<Set usage, Ch.~\ref{ch:shu}>>
  //<<Declare options, Ch.~\ref{ch:shu}>>
  //<<Parse options, Ch.~\ref{ch:shu}>>
  //<<Parse input files, Ch.~\ref{ch:shu}>>
#+end_src
#+begin_export latex
We import \ty{util}.
#+end_export
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  The usage consists of three parts, the usage message itself, a
  description of the program's purpose, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:shu}>>=
  u := "shustring [-h] [options] [files]"
  p := "Compute shortest unique substrings."
  e := "shustring foo.fasta"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \texttt{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the default help option, \texttt{-h}, we declare five
  additional options:
  \begin{enumerate}
  \item \texttt{-l}: Local shustrings
  \item \texttt{-s} $r$: Restrict output to sequences with names
    matching regular expression $r$
  \item \texttt{-r}: Include reverse strand
  \item \texttt{-q}: Quiet, don't print shustring sequences
  \item \texttt{-v}: Program version
  \end{enumerate}
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:shu}>>=
  var optL = flag.Bool("l", false, "local")
  var optS = flag.String("s", ".", "restrict output to sequences " +
	  "described by regex")
  var optR = flag.Bool("r", false, "include reverse strand")
  var optQ = flag.Bool("q", false, "quiet, don't print shustrings")
  var optV = flag.Bool("v", false, "version")
#+end_src
#+begin_src latex
  We import \texttt{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to \texttt{-s} and \texttt{-v}.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:shu}>>=
  flag.Parse()
  seqReg, err := regexp.Compile(*optS)
  if err != nil {
	  log.Fatalf("couldn't compile %q.\n", *optS)
  }
  if *optV {
	  util.PrintInfo("shustring")
  }
#+end_src
#+begin_src latex
  We import \texttt{regexp} and \texttt{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "regexp"
  "log"
#+end_src
#+begin_src latex
  The arguments not parsed yet are interpreted as the names of the input
  files. These are parsed by applying the function \texttt{scan} to each
  one in turn. Scan takes as arguments the option values for local,
  reverse, and quiet, and the regular expression to pick sequences.
#+end_src
#+begin_src go <<Parse input files, Ch.~\ref{ch:shu}>>=
  files := flag.Args()
  clio.ParseFiles(files, scan, *optL, *optR, *optQ, seqReg)
#+end_src
#+begin_src latex
  We import \texttt{fasta}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "github.com/evolbioinf/fasta"
#+end_src
#+begin_src latex
  In \texttt{scan} we retrieve the options just passed, collect the
  sequences in the input, and analyze them.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:shu}>>=
  func scan(r io.Reader, args ...interface{}) {
	  //<<Retrieve arguments, Ch.~\ref{ch:shu}>>
	  //<<Collect sequences, Ch.~\ref{ch:shu}>>
	  //<<Analyze sequences, Ch.~\ref{ch:shu}>>
  }
#+end_src
#+begin_src latex
  We import \texttt{io}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "io"
#+end_src
#+begin_src latex
  The arguments are retrieved by reflection.
#+end_src
#+begin_src go <<Retrieve arguments, Ch.~\ref{ch:shu}>>=
  local := args[0].(bool)
  reverse := args[1].(bool)
  quiet := args[2].(bool)
  seqReg := args[3].(*regexp.Regexp)
#+end_src
#+begin_src latex
  The sequences contained in the current file are stored in the
  eponymous slice.
#+end_src
#+begin_src go <<Collect sequences, Ch.~\ref{ch:shu}>>=
  scanner := fasta.NewScanner(r)
  var sequences []*fasta.Sequence
  for scanner.ScanSequence() {
	  sequence := scanner.Sequence()
	  sequences = append(sequences, sequence)
  }
#+end_src
#+begin_src latex
  To analyze the sequences, we concatenate them into one long byte
  slice, and, if appropriate, also add their reverse strands. Then we
  calculate the enhanced suffix array and the inverse suffix array of
  the concatenated data. From the enhanced suffix array we compute the
  shustrings---strictly speaking their lengths---which are analyzed and
  printed.
#+end_src
#+begin_src go <<Analyze sequences, Ch.~\ref{ch:shu}>>=
  //<<Concatenate sequences, Ch.~\ref{ch:shu}>>
  if reverse {
	  //<<Concatenate reverse strands, Ch.~\ref{ch:shu}>>
  }
  //<<Compute enhanced suffix array, Ch.~\ref{ch:shu}>>
  //<<Compute inverse suffix array, Ch.~\ref{ch:shu}>>
  //<<Compute shustrings, Ch.~\ref{ch:shu}>>
  //<<Analyze shustrings, Ch.~\ref{ch:shu}>>
  //<<Print shustrings, Ch.~\ref{ch:shu}>>
#+end_src
#+begin_src latex
  We concatenate the sequences and note their start and end
  positions. However, concatenation can create new substrings at the
  border between the joined sequences, which may mask legitimate
  shustrings. Consider for example the two sequences $s_1=\texttt{GTG}$
  and $s_2=\texttt{TT}$. Their combined shustring inventory is
  \texttt{GT}, \texttt{TG}, and \texttt{TT}. However, concatenation to
  \texttt{GTGTT} creates a second \texttt{GT}, which masks the
  uniqueness of the first. To prevent this, we separate sequences by a
  character outside of their alphabet, the zero byte.
#+end_src
#+begin_src go <<Concatenate sequences, Ch.~\ref{ch:shu}>>=
  var cat []byte
  var start, end []int
  start = append(start, 0)
  for i, sequence := range sequences {
	  if i > 0 {
		  cat = append(cat, 0)
		  start = append(start, end[i-1]+1)
	  }
	  cat = append(cat, sequence.Data()...)
	  end = append(end, start[i] + len(sequence.Data()))
  }
#+end_src
#+begin_src latex
  We reverse-complement each sequence and append it. No position
  information is required for the reverse strands, but we still separate
  sequences by the zero byte to prevent the creation of spurious
  substrings.
#+end_src
#+begin_src go <<Concatenate reverse strands, Ch.~\ref{ch:shu}>>=
  for _, sequence := range sequences {
	  sequence.ReverseComplement()
	  cat = append(cat, 0)
	  cat =  append(cat, sequence.Data()...)
  }
#+end_src
#+begin_src latex
  For the upcoming shustring analysis, we process the sequence just
  generated into the three components of an enhanced suffix array, the
  suffix array proper and the longest common prefix array.
#+end_src
#+begin_src go <<Compute enhanced suffix array, Ch.~\ref{ch:shu}>>=
  sa := esa.Sa(cat)
  lcp := esa.Lcp(cat, sa)
#+end_src
#+begin_src latex
  We import \texttt{esa}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "github.com/evolbioinf/esa"
#+end_src
#+begin_src latex
  We now implement the computation of shustring lengths using
  equation~(\ref{eq:shu}).  To ensure that there always exists an
  element $\lcp[i+1]$, we extend $\lcp$ by one cell. The value of this
  extra cell should be smaller than the length of any legitimate common
  prefix, we use the same value as in the first cell, $-1$.
#+end_src
#+begin_src latex
  We implement the inverse suffix array according to equation
  (\ref{eq:isa}).
#+end_src
#+begin_src go <<Compute inverse suffix array, Ch.~\ref{ch:shu}>>=
  isa := make([]int, len(sa))
  for i, _ := range sa {
	  isa[sa[i]] = i
  }
#+end_src
#+begin_src go <<Compute shustrings, Ch.~\ref{ch:shu}>>=
  shu := make([]int, len(sa))
  lcp = append(lcp, -1)
  for i, _ := range sequences {
	  for j := start[i]; j < end[i]; j++ {
		  //<<Calculate a shustring length, Ch.~\ref{ch:shu}>>
	  }
  }
#+end_src
#+begin_src latex
  When calculating an individual shustring length, we mark shustrings
  that extend beyond the end of their host sequence as non-existent by
  setting them to the largest integer available.
#+end_src
#+begin_src go <<Calculate a shustring length, Ch.~\ref{ch:shu}>>=
  is := isa[j]
  shu[is] = lcp[is]
  if lcp[is+1] > shu[is] {
	  shu[is] = lcp[is+1]
  }
  shu[is]++
  if sa[is] + shu[is] > end[i] {
	  shu[is] = math.MaxInt64
  }
#+end_src
#+begin_src latex
  In local mode, we print all shustrings, in global just the
  shortest. So the difference between these modes is the maximum length
  of a shustring to be printed. In local mode, we include all shustrings
  and thus set the maximum is a very large integer, but not the largest,
  as we have just used that to mark positions without any shustring at
  all. In global mode, the minimum shustring length becomes the maximum,
  which is computed for each sequence.
#+end_src
#+begin_src go <<Analyze shustrings, Ch.~\ref{ch:shu}>>=
  var maxima []int
  for i, _ := range sequences {
	  maxima = append(maxima, math.MaxInt64 - 1)
	  if local { continue }
	  for j := start[i]; j < end[i]; j++ {
		  l := shu[isa[j]]
		  if l < maxima[i] {
			  maxima[i] = l
		  }
	  }
  }
#+end_src
#+begin_src latex
  We import \texttt{math}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "math"
#+end_src
#+begin_src latex
  We print the shustrings to a tab writer, which we prepare before
  iterating over the sequences.
#+end_src
#+begin_src go <<Print shustrings, Ch.~\ref{ch:shu}>>=
  //<<Prepare tab writer, Ch.~\ref{ch:shu}>>
  //<<Iterate over sequences, Ch.~\ref{ch:shu}>>
#+end_src
#+begin_src latex
  A tab writer is used to write to a buffer. We initialize the writer to
  a minimal column width of 1 and tabs zero characters wide padded with
  two blanks.
#+end_src
#+begin_src go <<Prepare tab writer, Ch.~\ref{ch:shu}>>=
  var buf []byte
  buffer := bytes.NewBuffer(buf)
  w := new(tabwriter.Writer)
  w.Init(buffer, 1, 0, 2, ' ', 0)
#+end_src
#+begin_src latex
  We import \texttt{bytes} and \texttt{tabwriter}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "bytes"
  "text/tabwriter"
#+end_src
#+begin_src latex
  For each sequence that matches the regular expression, we write the
  sequence header and a table of shustrings.
#+end_src
#+begin_src go <<Iterate over sequences, Ch.~\ref{ch:shu}>>=
  for i, sequence := range sequences {
	  header := []byte(sequence.Header())
	  match := seqReg.Find(header)
	  if match == nil {
		  continue
	  }
	  fmt.Printf(">%s\n", sequence.Header())
	  //<<Write shustring table, Ch.~\ref{ch:shu}>>
  }
#+end_src
#+begin_src latex
  We import \texttt{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:shu}>>=
  "fmt"
#+end_src
#+begin_src latex
  The shustring table consists of a header a body. For every table, we
  initially reset the buffer and flush the buffer prior to printing.
#+end_src
#+begin_src go <<Write shustring table, Ch.~\ref{ch:shu}>>=
  buffer.Reset()
  //<<Write table header, Ch.~\ref{ch:shu}>>
  //<<Write table body, Ch.~\ref{ch:shu}>>
  w.Flush()
  fmt.Printf("%s", buffer)
#+end_src
#+begin_src latex
  The table header differs between the modes. In global mode, it
  consists of four fields, count, position, length, and sequence. In
  local mode, the count and the position coincide, so we drop the
  count. Similarly, in quiet mode we drop the column of shustring
  sequences.
#+end_src
#+begin_src go <<Write table header, Ch.~\ref{ch:shu}>>=
  fmt.Fprintf(w, "#\t")
  if !local {
	  fmt.Fprint(w, "Count\t")
  }
  fmt.Fprint(w, "Position\tLength")
  if !quiet {
	  fmt.Fprintf(w, "\tShustring")
  }
  fmt.Fprint(w, "\n")
#+end_src
#+begin_src latex
  For a given sequence, we walk though the $\lcp$ array in text-order
  and count and write the shustrings that don't exceed the maximum.
#+end_src
#+begin_src go <<Write table body, Ch.~\ref{ch:shu}>>=
  count := 0
  for j := start[i]; j < end[i]; j++ {
	  is := isa[j]
	  if shu[is] <= maxima[i] {
		  count++
		  //<<Write a shustring, Ch.~\ref{ch:shu}>>
	  }
  }
#+end_src
#+begin_src latex
  We write the count of a shustring, its starting position, and, where
  appropriate, its sequence. This is best looked up in the concatenated
  sequence, as the individual sequences might have been
  reverse-complemented.
#+end_src
#+begin_src go <<Write a shustring, Ch.~\ref{ch:shu}>>=
  s := sa[is] - start[i]
  l := shu[is]
  if !local { fmt.Fprintf(w, "\t%d", count) }
  fmt.Fprintf(w, "\t%d\t%d", s+1, l)
  if !quiet {
	  s = sa[is]
	  str := string(cat[s:s+l])
	  fmt.Fprintf(w, "\t%s", str)
  }
  fmt.Fprintf(w, "\n")
#+end_src
#+begin_src latex
  We're done writing \texttt{shustring}, time to test it.

  \section*{Testing}
  The testing framework has hooks for imports and the testing logic.
#+end_src
#+begin_src go <<shustring_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:shu}>>
  )

  func TestShustring(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:shu}>>
  }
#+end_src
#+begin_src latex
  We construct the test commands, the list of files containing the
  results we want, and run the commands.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:shu}>>=
  var commands []*exec.Cmd
  //<<Construct commands, Ch.~\ref{ch:shu}>>
  //<<Construct list of result files, Ch.~\ref{ch:shu}>>
  for i, command := range commands {
	  //<<Run command, Ch.~\ref{ch:shu}>>
  }
#+end_src
#+begin_src latex
  We import \texttt{exec}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:shu}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We run a test without any options, followed by one test for each of
  the five options, so we construct six commands in total.
#+end_src
#+begin_src go <<Construct commands, Ch.~\ref{ch:shu}>>=
  p := "./shustring"
  f := "test.fasta"
  c := exec.Command(p, f)
  commands = append(commands, c)
  c = exec.Command(p, "-l", f)
  commands = append(commands, c)
  c = exec.Command(p, "-s", "1", f)
  commands = append(commands, c)
  c = exec.Command(p, "-r", f)
  commands = append(commands, c)
  c = exec.Command(p, "-q", f)
  commands = append(commands, c)
#+end_src
#+begin_src latex
  For each command we construct a result file.
#+end_src
#+begin_src go <<Construct list of result files, Ch.~\ref{ch:shu}>>=
  var results []string
  for i, _ := range commands {
	  name := "r" + strconv.Itoa(i+1) + ".txt"
	  results = append(results, name)
  }
#+end_src
#+begin_src latex
  We import \texttt{strconv}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:shu}>>=
  "strconv"
#+end_src
#+begin_src latex
  For each command we compare what we get with what we want.
#+end_src
#+begin_src go <<Run command, Ch.~\ref{ch:shu}>>=
  get, err := command.Output()
  if err != nil {
	  t.Errorf("couldn't run %q\n", command)
  }
  want, err := ioutil.ReadFile(results[i])
  if err != nil {
	  t.Errorf("couldn't open %q\n", results[i])
  }
  if !bytes.Equal(want, get) {
	  t.Errorf("want:\n%s\nget:\n%s\n", want, get)
  }
#+end_src
#+begin_src latex
  We import \texttt{ioutil} and \texttt{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:shu}>>=
  "io/ioutil"
  "bytes"
#+end_src
