#+begin_src latex
  \section*{Introduction}
  We'd often like to draw a quick phylogeny from a tree given in Newick
  format, for example the one shown in Figure~\ref{fig:phy}A. The
  program \ty{plotTree} converts such a tree string either into a rooted
  phylogeny (Figure~\ref{fig:phy}B) or an unrooted phylogeny
  (Figure~\ref{fig:phy}C). The user can also opt for an encapsulated
  postscript file and may omit the node labels. The phylogeny is
  rendered in \ty{gnuplot}.

  \begin{figure}
    \begin{center}
      \textbf{A}\\
      \small
      \texttt{(((One:0.2,Two:0.3)75:0.3,(Three:0.5,Four:0.3)69:0.2):0.3,Five:0.7):0.0;}
    \end{center}
    \begin{center}
      \begin{tabular}{cc}
	\textbf{B} & \textbf{C}\\
	\includegraphics{treeR} & \includegraphics{treeU}
      \end{tabular}
    \end{center}
    \caption{The program \ty{drawTree} reads a tree in Newick format
      (\textbf{A}) and converts it into a
      rooted (\textbf{B}) or an unrooted (\textbf{C})
      phylogeny.}\label{fig:phy}
  \end{figure}


  \section*{Implementation}
  The outline of \ty{plotTree} has hooks for imports, types, functions,
  and the logic of the main function.
#+end_src
#+begin_src go <<plotTree.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:pt}>>
  )
  //<<Types, Ch.~\ref{ch:pt}>>
  //<<Functions, Ch.~\ref{ch:pt}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  In the main function we set the usage, declare the options and parse
  the options. Then we parse the input files.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:pt}>>=
  //<<Set usage, Ch.~\ref{ch:pt}>>
  //<<Declare options, Ch.~\ref{ch:pt}>>
  //<<Parse options, Ch.~\ref{ch:pt}>>
  //<<Parse input files, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  \subsection*{User Interaction}
  The usage consists of three parts, the actual usage message, an
  explanation of the purpose of \ty{plotTree}, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:pt}>>=
  u := "plotTree [-h] [option]... [foo.nwk]..."
  p := "Plot Newick-formatted trees."
  e := "plotTree foo.nwk"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import the package \ty{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the built-in help option (\ty{-h}), we declare a version
  option (\ty{-v}) and a set of program-specific options: By default, we
  interpret a bifurcating root as belonging to a rooted tree drawn like
  Figure~\ref{fig:phy}B, and a trifurcating root as belonging to an
  unrooted tree drawn like Figure~\ref{fig:phy}C. However, the user can
  enforce a rooted (\ty{-r}) or an unrooted (\ty{-u}) layout
  irrespective of the degree of the root.
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:pt}>>=
  var optV = flag.Bool("v", false, "version")
  var optR = flag.Bool("r", false, "rooted tree (default input)")
  var optU = flag.Bool("u", false, "unrooted tree (default input)")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "flag"
#+end_src
#+begin_src latex
  The nodes of a Newick tree may or may not be labeled. By default,
  \ty{plotTree} draws the labels, but the user can omit them (\ty{-n}).
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:pt}>>=
  var optN = flag.Bool("n", false, "no node labels (default input)")
#+end_src
#+begin_src latex
  The default output is drawn to the screen, but the user can also draw
  the tree to a postscript file (\ty{-p}) and give that postscript plot
  specific dimensions (\ty{-d}). The user can set the plot margins as a
  fraction of the plot size (\ty{-m}), and the scale of the tree
  (\ty{-c}).
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:pt}>>=
  var optP = flag.String("p", "", "encapsulated postscript file")
  defScrDim := "640,384"
  defPsDim := "5,3.5"
  var optD = flag.String("d", defScrDim, "plot dimensions; " +
	  "pixels for screen or " + defPsDim + " inches for ps")
  var optM = flag.Float64("m", 0.1, "margin")
  var optC = flag.Float64("c", 0.0, "scale")
#+end_src
#+begin_src latex
  Finally, the user may opt to print the \ty{gnuplot} script.
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:pt}>>=
  var optS = flag.String("s", "", "write gnuplot script to file")
#+end_src
#+begin_src latex
  We parse the options and immediately respond to \ty{-v} as this might
  stop \ty{plotTree}. Then we create the variable \ty{opts} and store
  the option values in it.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:pt}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("plotTree")
  }
  opts := new(opts)
  //<<Store options, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  We declare the \ty{opts} type as a struct with a hook for the fields
  we need.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:pt}>>=
  type opts struct {
	  //<<Opts fields, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  We store the the options.
#+end_src
#+begin_src go <<Store options, Ch.~\ref{ch:pt}>>=
  opts.Rooted = *optR
  opts.Unrooted = *optU
  opts.NoLabels = *optN
  opts.Ps = *optP
  opts.Dim = *optD
  opts.Margin = *optM
  opts.Scale = *optC
  opts.Script = *optS
#+end_src
#+begin_src latex
  We declare the fields we just used.
#+end_src
#+begin_src go <<Opts fields, Ch.~\ref{ch:pt}>>=
  Rooted, Unrooted, NoLabels bool
  Ps, Dim string
  Margin, Scale float64
  Script string
#+end_src
#+begin_src latex
  If the user chose postscript and didn't set a size, we set the default
  postscript size.
#+end_src
#+begin_src go <<Store options, Ch.~\ref{ch:pt}>>=
  if opts.Ps != "" && opts.Dim == defScrDim {
	  opts.Dim = defPsDim
  }
#+end_src


#+begin_src latex
  We also set the window, which by default is wxt, but on darwin systems
  (macOS) becomes qt.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:pt}>>=
  opts.Win = "wxt"
  if runtime.GOOS == "darwin" { opts.Win = "qt" }
#+end_src
#+begin_src latex
  We add the \ty{opts} field \ty{Win}.
#+end_src
#+begin_src go <<Opts fields, Ch.~\ref{ch:pt}>>=
  Win string
#+end_src
#+begin_src latex
  We import \ty{runtime}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "runtime"
#+end_src
#+begin_src latex
  \subsection*{Scan Input Files}
  The remaining tokens on the command line are interpreted as tree
  files. Each of them is parsed with the function \ty{scan}, which takes
  the file names, a file counter, and the options as arguments.
#+end_src
#+begin_src go <<Parse input files, Ch.~\ref{ch:pt}>>=
  files := flag.Args()
  fileCounter := 0
  clio.ParseFiles(files, scan, files, &fileCounter, opts)
#+end_src
#+begin_src latex
  Inside \ty{scan}, we retrieve the arguments. Then we iterate over the
  trees, and count each one. A tree is represented by its root node,
  which we convert from the root returned by the scanner. Then we draw
  the newly converted tree. Having drawn all the trees in the file, we
  increment the file counter.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func scan(r io.Reader, args ...interface{}) {
	  //<<Retrieve arguments, Ch.~\ref{ch:pt}>>
	  sc := nwk.NewScanner(r)
	  treeCounter := 0
	  for sc.Scan() {
		  treeCounter++
		  root := convertTree(sc.Tree())
		  //<<Draw tree, Ch.~\ref{ch:pt}>>
	  }
	  //<<Increment file counter, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  We import \ty{io} and \ty{nwk}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "io"
  "github.com/evolbioinf/nwk"
#+end_src
#+begin_src latex
  We retrieve the files, the file counter, and the options.
#+end_src
#+begin_src go <<Retrieve arguments, Ch.~\ref{ch:pt}>>=
  files := args[0].([]string)
  fileCounter := args[1].(*int)
  opts := args[2].(*opts)
#+end_src
#+begin_src latex
  We convert the new tree from nodes of type \ty{nwk.Node} to our
  local node type. This allows us to tailor the nodes to fit the layout
  task in hand.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func convertTree(v *nwk.Node) *node {
	  root := new(node)
	  cpTree(v, root)
	  return root
  }
#+end_src
#+begin_src latex
  A \ty{node} replicates the fields of a \ty{nwk.Node} and has a hook
  for additional fields we add later.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:pt}>>=
  type node struct {
	  child, sib, parent *node
	  label string
	  length float64
	  hasLength bool
	  //<<Node fields, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  In the function \ty{cpTree} we copy each node. We begin by copying the
  label and the branch length, then we copy the tree topology.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func cpTree(v *nwk.Node, n *node) {
	  if v == nil { return }
	  n.label = v.Label
	  n.length = v.Length
	  n.hasLength = v.HasLength
	  //<<Copy tree topology, Ch.~\ref{ch:pt}>>
	  cpTree(v.Child, n.child)
	  cpTree(v.Sib, n.sib)
  }
#+end_src
#+begin_src latex
  The tree topology consists of references to child, sib, and parent.
#+end_src
#+begin_src go <<Copy tree topology, Ch.~\ref{ch:pt}>>=
  if v.Child != nil {
	  c := new(node)
	  c.parent = n
	  n.child = c
	
  }
  if v.Sib != nil {
	  s := new(node)
	  s.parent = n.parent
	  n.sib = s
  }
#+end_src
#+begin_src latex
  \subsection*{Draw Tree}
  We draw a tree by constructing its segments and its title. Then we
  construct an output stream and write the segments to it.
#+end_src
#+begin_src go <<Draw tree, Ch.~\ref{ch:pt}>>=
  //<<Construct tree segments, Ch.~\ref{ch:pt}>>
  //<<Construct plot title, Ch.~\ref{ch:pt}>>
  //<<Construct output stream, Ch.~\ref{ch:pt}>>
  //<<Write segments to output stream, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  We decide whether the tree is to be drawn in rooted or unrooted
  format. Then we layout the tree accordingly and store its segments. A
  special segment is the scale, which we add last.
#+end_src
#+begin_src go <<Construct tree segments, Ch.~\ref{ch:pt}>>=
  var segments []segment
  rooted := false
  //<<Is the tree rooted or unrooted? Ch.~\ref{ch:pt}>>
  if rooted {
	  //<<Layout rooted tree, Ch.~\ref{ch:pt}>>
  } else {
	  //<<Layout unrooted tree, Ch.~\ref{ch:pt}>>
  }
  //<<Add scale, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  A segment consists of a start and an end position, a label of the
  start position, an angle of that label, and an orientation. The
  orientation is either \ty{l} for \emph{left} or \ty{r} for
  \emph{right}.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:pt}>>=
  type segment struct {
	  x1, y1, x2, y2 float64
	  l string
	  a, h, v float64
	  o string
  }
#+end_src
#+begin_src latex
  By default, we base the layout on the root's number of
  children. However, the user might have used the switches for rooted or
  unrooted layout.
#+end_src
#+begin_src go <<Is the tree rooted or unrooted? Ch.~\ref{ch:pt}>>=
  //<<Base layout on the root's number of children, Ch.~\ref{ch:pt}>>
  //<<Base layout on user options, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  At this point the tree is treated as unrooted, but if the root has two
  children or less, we set it to rooted.
#+end_src
#+begin_src go <<Base layout on the root's number of children, Ch.~\ref{ch:pt}>>=
  w := root.child
  n := 0
  for w != nil {
	  n++
	  w = w.sib
  }
  if n <= 2 {
	  rooted = true
  }
#+end_src
#+begin_src latex
  The default layout can be overridden by the user.
#+end_src
#+begin_src go <<Base layout on user options, Ch.~\ref{ch:pt}>>=
  if opts.Rooted {
	  rooted = true
  }
  if opts.Unrooted {
	  rooted = false
  }
#+end_src
#+begin_src latex
  We layout a rooted tree by setting the x and y coordinates of its
  nodes in a tree traversal. For setting the y coordinate we refer to a
  ``global'' y position. Then we collect the branches.
#+end_src
#+begin_src go <<Layout rooted tree, Ch.~\ref{ch:pt}>>=
  setXcoords(root)
  y := 0.0
  y = setYcoords(root, y)
  segments = collectBranchesR(root, segments, opts)
#+end_src
#+begin_src latex
  The x coordinates are set recursively by adding the branch length to
  the parent's x coordinate. This means the root's x coordinate is zero.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func setXcoords(v *node) {
	  if v == nil { return }
	  if v.parent != nil {
		  l := v.length
		  if !v.hasLength { l = 1.0 }
		  v.x = l + v.parent.x
	  }
	  setXcoords(v.child)
	  setXcoords(v.sib)
  }
#+end_src
#+begin_src latex
  We declare fields for the x and y coordinates of a node.
#+end_src
#+begin_src go <<Node fields, Ch.~\ref{ch:pt}>>=
  x, y float64
#+end_src
#+begin_src latex
  The y coordinates are set separately for leaves and internal nodes.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func setYcoords(v *node, y float64) float64 {
	  if v == nil { return y }
	  y = setYcoords(v.child, y)
	  if v.child == nil {
		  //<<Set y coordinate of leaf, Ch.~\ref{ch:pt}>>
	  } else {
		  //<<Set y coordinate of internal node, Ch.~\ref{ch:pt}>>
	  }
	  y = setYcoords(v.sib, y)
	  return y
  }
#+end_src
#+begin_src latex
  The leaves are spaced evenly along the y axis using the y coordinate
  passed.
#+end_src
#+begin_src go <<Set y coordinate of leaf, Ch.~\ref{ch:pt}>>=
  v.y = y
  y++
#+end_src
#+begin_src latex
  Internal nodes are centered on their children.
#+end_src
#+begin_src go <<Set y coordinate of internal node, Ch.~\ref{ch:pt}>>=
  w := v.child
  min := w.y
  for w.sib != nil {
	  w = w.sib
  }
  max := w.y
  v.y = (min + max) / 2.0
#+end_src
#+begin_src latex
  We collect the branches of the rooted tree recursively, treating the
  root separately from all other nodes.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func collectBranchesR(v *node, segments []segment, o *opts) []segment {
	  if v == nil { return segments }
	  if v.parent == nil {
		  //<<Treat root in rooted tree, Ch.~\ref{ch:pt}>>
	  } else {
		  //<<Treat other node in rooted tree, Ch.~\ref{ch:pt}>>
	  }
	  segments = collectBranchesR(v.child, segments, o)
	  segments = collectBranchesR(v.sib, segments, o)
	  return segments
  }
#+end_src
#+begin_src latex
  The root may be labeled, in which case we add an empty segment with
  the label. To prevent a label from touching the point labeled, we pad
  the label with a blank.
#+end_src
#+begin_src go <<Treat root in rooted tree, Ch.~\ref{ch:pt}>>=
  if v.label != "" && !o.NoLabels {
	  label := " " + v.label
	  seg := segment{x1: v.x, y1: v.y, x2: v.x,
		  y2: v.y, l: label, o: "l"}
	  segments = append(segments, seg)
  }
#+end_src
#+begin_src latex
  For the other nodes we again pad the label on the left. Then we draw
  two segments each. Let $(v_x,v_y)$ be the coordinates of the current
  node, $(p_x,p_y)$ the coordinates of its parent. Then we draw one
  segment from the parent to the height of $v$, $(p_x,p_y),(p_x,v_y)$,
  and one from $v$ to that point, $(v_x,v_y),(p_x,v_y)$. The first
  segment is not labeled, the second one might be labeled at its
  starting position.
#+end_src
#+begin_src go <<Treat other node in rooted tree, Ch.~\ref{ch:pt}>>=
  label := ""
  if v.label != "" && !o.NoLabels {
	  label = " " + v.label
  }
  p := v.parent
  s1 := segment{x1: p.x, y1: p.y, x2: p.x, y2: v.y}
  s2 := segment{x1: v.x, y1: v.y, x2: p.x,
	  y2: v.y, l: label, o: "l"}
  segments = append(segments, s1)
  segments = append(segments, s2)
#+end_src
#+begin_src latex
  The layout of the unrooted tree is based on the number of leaves in
  the subtree of each internal node. So we compute this, before setting
  the node coordinates with \ty{setCoords}. For this we initialize the
  omega and tau parameters of the root to -1. Then we collect the
  branches with \ty{collectBranchesU}.
#+end_src
#+begin_src go <<Layout unrooted tree, Ch.~\ref{ch:pt}>>=
  numLeaves(root)
  totalLeaves := root.nl
  root.omega = -1.0
  root.tau = -1.0
  setCoords(root, totalLeaves)
  segments = collectBranchesU(root, segments, opts)
#+end_src
#+begin_src latex
  We declare the node field \ty{nl} to hold the number of leaves in the
  node's subtree.
#+end_src
#+begin_src go <<Node fields, Ch.~\ref{ch:pt}>>=
  nl int
#+end_src
#+begin_src latex
  The function \ty{numLeaves} is a depth-first traversal that passes the
  number of leaves up from child to parent.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func numLeaves(v *node) {
	  if v == nil { return }
	  numLeaves(v.child)
	  numLeaves(v.sib)
	  if v.child == nil {
		  v.nl = 1
	  }
	  if v.parent != nil {
		  v.parent.nl += v.nl
	  }
  }
#+end_src
#+begin_src latex
  When setting the node coordinates, we place the current node, unless
  it is the root, and then place its children~\cite{bac05:dra}.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func setCoords(v *node, nl int) {
	  if v == nil { return }
	  if v.parent != nil {
		  //<<Place node, Ch.~\ref{ch:pt}>>
	  }
	  //<<Place children, Ch.~\ref{ch:pt}>>
	  setCoords(v.child, nl)
	  setCoords(v.sib, nl)
  }
#+end_src
#+begin_src latex
  We place the node according to the formulae given in~\cite{bac05:dra}.
#+end_src
#+begin_src go <<Place node, Ch.~\ref{ch:pt}>>=
  p := v.parent
  l := v.length
  if !v.hasLength { l = 1.0 }
  v.x = p.x + l *
	  (math.Cos(v.tau + v.omega / 2.0))
  v.y = p.y + l *
	  (math.Sin(v.tau + v.omega / 2.0))
#+end_src
#+begin_src latex
  We import \ty{math}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "math"
#+end_src
#+begin_src latex
  We declare the new node fields \ty{tau} and \ty{omega}.
#+end_src
#+begin_src go <<Node fields, Ch.~\ref{ch:pt}>>=
  tau, omega float64
#+end_src
#+begin_src latex
  We place the children~\cite{bac05:dra}.
#+end_src
#+begin_src go <<Place children, Ch.~\ref{ch:pt}>>=
  eta := v.tau
  w := v.child
  for w != nil {
	  w.omega = float64(w.nl) / float64(nl) * 2.0 * math.Pi
	  w.tau = eta
	  eta += w.omega
	  w = w.sib
  }
#+end_src
#+begin_src latex
  Each node with a parent corresponds to a segment.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func collectBranchesU(v *node, segments []segment,
	  o *opts) []segment {
	  if v == nil { return segments }
	  if v.parent != nil {
		  //<<Construct segment, Ch.~\ref{ch:pt}>>
	  }
	  segments = collectBranchesU(v.child, segments, o)
	  segments = collectBranchesU(v.sib, segments, o)
	  return segments
  }
#+end_src
#+begin_src latex
  A segment starts at the child and ends at the parent. It has a label
  and if the child is a leaf, that label should have the same direction
  as the branch~\cite{bac05:dra}. However, we'd like to avoid labels
  that are upside down and we also have to pad the label with a blank; so
  we adjust the angles and labels. Once we've constructed the segment,
  we store it in the slice of segments.
#+end_src
#+begin_src go <<Construct segment, Ch.~\ref{ch:pt}>>=
  p := v.parent
  a := 0.0
  ori := "l"
  label := ""
  if v.child == nil {
	  a = (v.tau + v.omega / 2.0) * 180.0 / math.Pi
  }
  //<<Adjust angle and label, Ch.~\ref{ch:pt}>>
  seg := segment{x1: v.x, y1: v.y, x2: p.x, y2: p.y,
	  l: label, a: a, o: ori}
  segments = append(segments, seg)
#+end_src
#+begin_src latex
  If the label is greater than 90 degrees and less than 270 degrees, we
  add 180 degrees to it in order to flip it. In that case the label is
  padded with on or two blanks on the right hand side, depending on the
  OS. In that case we also set the orientation to \emph{right}, \ty{r}.
#+end_src
#+begin_src go <<Adjust angle and label, Ch.~\ref{ch:pt}>>=
  if a > 90 && a < 270 {
	  a += 180
	  ori = "r"
	  if !o.NoLabels {
		  pad := " "
		  if runtime.GOOS == "darwin" { pad += " " }
		  label = v.label + pad
	  }
  } else if !o.NoLabels {
	  label = " " + v.label
  }
#+end_src
#+begin_src latex
  The scale is located at the top right hand corner of the tree. To find
  it, we calculate the plot dimensions.
#+end_src
#+begin_src go <<Add scale, Ch.~\ref{ch:pt}>>=
  //<<Calculate plot dimensions, Ch.~\ref{ch:pt}>>
  //<<Construct scale, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  The plot dimensions are calculated using the function \ty{findDim}. It
  takes as argument a structure holding the maxima and minima of x and
  y. We initialize the maxima to the smallest number and the minima to
  the largest number.
#+end_src
#+begin_src go <<Calculate plot dimensions, Ch.~\ref{ch:pt}>>=
  dim := new(dimension)
  dim.xMin = math.MaxFloat64
  dim.xMax = -dim.xMin
  dim.yMin = dim.xMin
  dim.yMax = dim.xMax
  findDim(root, dim)
#+end_src
#+begin_src latex
  We declare a \ty{dimension} to hold the minima and maxima of x and y.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:pt}>>=
  type dimension struct {
	  xMin, xMax float64
	  yMin, yMax float64
  }
#+end_src
#+begin_src latex
  Inside \ty{findDim}, the x and y values passed are compared to
  that of the current node and updated if necessary.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pt}>>=
  func findDim(v *node, d *dimension) {
	  if v == nil { return }
	  if d.xMax < v.x { d.xMax = v.x }
	  if d.yMax < v.y { d.yMax = v.y }
	  if d.xMin > v.x { d.xMin = v.x }
	  if d.yMin > v.y { d.yMin = v.y }
	  findDim(v.child, d)
	  findDim(v.sib, d)
  }
#+end_src
#+begin_src latex
  The scale consists of a line and a number.
#+end_src
#+begin_src go <<Construct scale, Ch.~\ref{ch:pt}>>=
  //<<Draw scale line, Ch.~\ref{ch:pt}>>
  //<<Draw scale number, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  To draw the scale line, we need its length and its coordinates. The
  scale length is either given by the user or calculated by us.
#+end_src
#+begin_src go <<Draw scale line, Ch.~\ref{ch:pt}>>=
  scaleLen := opts.Scale
  width := 0.0
  if scaleLen == 0.0 {
	  //<<Determine scale length, Ch.~\ref{ch:pt}>>
  }
  //<<Determine scale coordinates, Ch.~\ref{ch:pt}>>
  s1 := segment{x1: x1, y1: y, x2: x2, y2: y}
  segments = append(segments, s1)
#+end_src
#+begin_src latex
  Let $w$ be the plot width and the offset $\ell$ the decadic logarithm of $w$
  rounded to the nearest integer,
  \[
  \ell=\mbox{round}(\log_{10}(w)).
  \]
  Then we choose $10^{\ell}/10$ as the length of the scale. Recall, the
  user can set a length, but this should be a good starting point.
#+end_src
#+begin_src go <<Determine scale length, Ch.~\ref{ch:pt}>>=
  width = dim.xMax - dim.xMin
  y := math.Round(math.Log10(width))
  scaleLen = math.Pow(10, y) / 10.0
#+end_src
#+begin_src latex
  We place it by the margin, $m$, above the plot height, $h$, so
  it starts at $(x_{\rm m},y_{\rm m}+h\times m)$.
#+end_src
#+begin_src go <<Determine scale coordinates, Ch.~\ref{ch:pt}>>=
  x1 := dim.xMax
  height := dim.yMax - dim.yMin
  y := dim.yMax + height * opts.Margin
  x2 := x1 - scaleLen
#+end_src
#+begin_src latex
  The label of the scale is placed in its middle. We raise it above the
  line by 1/20-th of the plot height.
#+end_src
#+begin_src go <<Draw scale number, Ch.~\ref{ch:pt}>>=
  x := (x1+x2) / 2.0
  y += height / 20.0
  l := strconv.FormatFloat(scaleLen, 'g', 3, 64)
  s1 = segment{x1: x, y1: y, x2: x, y2: y, l: l, o: "c"}
  segments = append(segments, s1)
#+end_src
#+begin_src latex
  We import \ty{strconv}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "strconv"
#+end_src
#+begin_src latex
  The plot title is the root of the file name plus the counter. If there
  are no input files, we set the name to \emph{stdin}.
#+end_src
#+begin_src go <<Construct plot title, Ch.~\ref{ch:pt}>>=
  if opts.Ps != "" {
	  opts.Title = ""
  } else {
	  fn := "stdin"
	  if len(files) > *fileCounter {
		  fn = files[*fileCounter]
	  }
	  title := strings.Split(path.Base(fn), ".")[0]
	  title += "_" + strconv.Itoa(treeCounter)
	  opts.Title = title
  }
#+end_src
#+begin_src latex
  We import \ty{strings} and \ty{path}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "strings"
  "path"
#+end_src
#+begin_src latex
  We add the option field \ty{Title}.
#+end_src
#+begin_src go <<Opts fields, Ch.~\ref{ch:pt}>>=
  Title string
#+end_src
#+begin_src latex
  The output stream is either the standard input stream of the
  \ty{gnuplot} command or the script file requested by the user.
#+end_src
#+begin_src go <<Construct output stream, Ch.~\ref{ch:pt}>>=
  var wr io.WriteCloser
  var gcmd *exec.Cmd
  var err error
  if opts.Script == "" {
	  gcmd = exec.Command("gnuplot")
	  wr, err = gcmd.StdinPipe()
	  if err != nil { log.Fatal(err) }
  } else {
	  wr, err = os.Create(opts.Script)
	  if err != nil { log.Fatal(err) }
  }
#+end_src
#+begin_src latex
  We import \ty{exec}, \ty{os}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "os/exec"
  "os"
  "log"
#+end_src
#+begin_src latex
  We write the segments to an the output stream in a Go routine, where
  we also close the output stream again. Unless the user opted for the
  script, we run \ty{gnuplot}.
#+end_src
#+begin_src go <<Write segments to output stream, Ch.~\ref{ch:pt}>>=
  done := make(chan struct{})
  go func() {
	  //<<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:pt}>>
	  //<<Close output stream, Ch.~\ref{ch:pt}>>
	  done <- struct{}{}
  }()
  if opts.Script == "" {
	  //<<Run \ty{gnuplot}, Ch.~\ref{ch:pt}>>
  }
  <-done
#+end_src
#+begin_src latex
  We write the \ty{gnuplot} code in four steps: We write the terminal,
  remove the axes, write the labels, write the plot, its segments, and
  its margins.
#+end_src
#+begin_src go <<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:pt}>>=
  //<<Write terminal, Ch.~\ref{ch:pt}>>
  //<<Remove axes, Ch.~\ref{ch:pt}>>
  //<<Write labels, Ch.~\ref{ch:pt}>>
  //<<Write plot, Ch.~\ref{ch:pt}>>
  //<<Write segments, Ch.~\ref{ch:pt}>>
  //<<Write margins, Ch.~\ref{ch:pt}>>
#+end_src
#+begin_src latex
  The terminal is either encapsulated postscript or a persistent
  window. The postscript plot might have dimensions other than the default.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pt}>>=
  t := "set terminal"
  if opts.Ps != "" {
	  t += " postscript eps monochrome"
  } else {
	  t += " " + opts.Win + " persist"
  }
  t += " size " + opts.Dim
  fmt.Fprintf(wr, "%s\n", t)
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pt}>>=
  "fmt"
#+end_src
#+begin_src latex
  \ty{gnuplot} version 5.4 patch level 3 generates plots with red
  background---at least on macOS. We make sure our plots are white.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pt}>>=
  c := "set object 1 rectangle from screen 0,0 " +
	  "to screen 1,1 fillcolor rgb 'white' behind"
  fmt.Fprintf(wr, "%s\n", c)
#+end_src
#+begin_src latex
  We also set the postscript file.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pt}>>=
  if opts.Ps != "" {
	  fmt.Fprintf(wr, "set output \"%s\"\n", opts.Ps)
  }
#+end_src
#+begin_src latex
  To remove the plot axes, we remove the tics of the x- and y-axes, and
  remove the border.
#+end_src
#+begin_src go <<Remove axes, Ch.~\ref{ch:pt}>>=
  fmt.Fprintf(wr, "unset xtics\n")
  fmt.Fprintf(wr, "unset ytics\n")
  fmt.Fprintf(wr, "unset border\n")
#+end_src
#+begin_src latex
  We iterate over the segments and write any labels they might contain.
#+end_src
#+begin_src go <<Write labels, Ch.~\ref{ch:pt}>>=
  t = "set label \"%s\" %s rotate by %d at %.3f,%.3f front\n"
  for _, s := range segments {
	  if s.l != "" {
		  a := int(math.Round(s.a))
		  fmt.Fprintf(wr, t, s.l,
			  s.o, a, s.x1, s.y1)
	  }
  }
#+end_src
#+begin_src latex
  Our plot is a line plot in black that might have a title.
#+end_src
#+begin_src go <<Write plot, Ch.~\ref{ch:pt}>>=
  if opts.Title != "" {
	  fmt.Fprintf(wr, "set title \"%s\"\n",
		  opts.Title)
  }
  fmt.Fprintf(wr, "plot \"-\" t \"\" w l lc \"black\"")
#+end_src
#+begin_src latex
  For postscript output we set the line width to 3 before we terminate
  the plot command with a newline.
#+end_src
#+begin_src go <<Write plot, Ch.~\ref{ch:pt}>>=
  if opts.Ps != "" {
	  fmt.Fprintf(wr, " lw 3")
  }
  fmt.Fprintf(wr, "\n")
#+end_src
#+begin_src latex
  Segments are pairs of points set off by a blank line.
#+end_src
#+begin_src go <<Write segments, Ch.~\ref{ch:pt}>>=
  for i, s := range segments {
	  if i > 0 {
		  fmt.Fprintf(wr, "\n")
	  }
	  fmt.Fprintf(wr, "%.3f %.3f\n%.3f %.3f\n",
		  s.x1, s.y1, s.x2, s.y2)
  }
#+end_src
#+begin_src latex
  We write the margins for the leaf labels. All trees have labels on the
  right hand side, so we place an extra dot there. In addition, unrooted
  trees require margins on the other three sides.
#+end_src
#+begin_src go <<Write margins, Ch.~\ref{ch:pt}>>=
  xOffset := width * opts.Margin
  x := dim.xMax + xOffset
  fmt.Fprintf(wr, "\n%.3f 0\n", x)
  if !rooted {
	  //<<Add margins to unrooted tree, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  We add margins to the top, bottom, and left.
#+end_src
#+begin_src go <<Add margins to unrooted tree, Ch.~\ref{ch:pt}>>=
  yOffset := height * opts.Margin
  y := height + yOffset
  fmt.Fprintf(wr, "\n0 %.3f\n", y)
  y = dim.yMin - yOffset
  fmt.Fprintf(wr, "\n0 %.3f\n", y)
  x = dim.xMin - xOffset
  fmt.Fprintf(wr, "\n%.3f 0\n", x)
#+end_src
#+begin_src latex
  Having written all \ty{gnuplot} instructions to the output stream, we
  close it again.
#+end_src
#+begin_src go <<Close output stream, Ch.~\ref{ch:pt}>>=
  wr.Close()
#+end_src
#+begin_src latex
  We run the \ty{gnuplot} command and check for errors.
#+end_src
#+begin_src go <<Run \ty{gnuplot}, Ch.~\ref{ch:pt}>>=
  err = gcmd.Run()
  if err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  There is still the file counter to increment.
#+end_src
#+begin_src go <<Increment file counter, Ch.~\ref{ch:pt}>>=
  *fileCounter++
#+end_src
#+begin_src latex
  We've finished \ty{plotTree}, time to test it.
  \section*{Testing}
  The outline of our testing program contains hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<plotTree_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:pt}>>
  )

  func TestPlotTree(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:pt}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests. In each test we compare the \ty{gnuplot}
  output we get with the precomputed \ty{gnuplot} output we want. The
  \ty{gnuplot} output of the test runs is written to a unique temporary
  file that we delete after we have iterated over the tests.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:pt}>>=
  var tests []*exec.Cmd
  gf, err := ioutil.TempFile(".", "tmp_*.gp")
  if err != nil { t.Error("can't open temp file") }
  g := gf.Name()
  //<<Construct tests, Ch.~\ref{ch:pt}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:pt}>>
  }
  err = os.Remove(g)
  if err != nil { t.Errorf("can't remove %q", g) }
#+end_src
#+begin_src latex
  We import \ty{exec}, \ty{ioutil}, and \ty{os}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pt}>>=
  "os/exec"
  "io/ioutil"
  "os"
#+end_src
#+begin_src latex
  Our tests run on the Newick tree shown in Figure~\ref{fig:phy}A, which
  is stored in \ty{newick.nwk}. We draw rooted and unrooted versions of
  it, with and without node labels.
#+end_src
#+begin_src go <<Construct tests, Ch.~\ref{ch:pt}>>=
  f := "newick.nwk"
  test := exec.Command("./plotTree", "-r", "-s", g, f)
  tests = append(tests, test)
  test = exec.Command("./plotTree", "-u", "-s", g, f)
  tests = append(tests, test)
  test = exec.Command("./plotTree", "-r", "-s", g, "-n", f)
  tests = append(tests, test)
  test = exec.Command("./plotTree", "-u", "-s", g, "-n", f)
  tests = append(tests, test)
#+end_src
#+begin_src latex
  When we run a test, we compare the result we get to the result we
  want, which is stored in files with names we construct next.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:pt}>>=
  err := test.Run()
  if err != nil { t.Errorf("couldn't run %q", test) }
  get, err := ioutil.ReadFile(g)
  if err != nil { t.Errorf("couldn't open %q", g) }
  //<<Construct file name, Ch.~\ref{ch:pt}>>
  want , err := ioutil.ReadFile(f)
  if err != nil { t.Errorf("couldn't open %q", f) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pt}>>=
  "bytes"
#+end_src
#+begin_src latex
  By default, the results are stored in files called \ty{r1.gp},
  \ty{r2.gp}, and so on, inside the directory \ty{results}. On darwin
  systems, these names are extended by ``d''.
#+end_src
#+begin_src go <<Construct file name, Ch.~\ref{ch:pt}>>=
  f := "results/r" + strconv.Itoa(i+1)
  if runtime.GOOS == "darwin" {
	  f += "d"
  }
  f += ".gp"
#+end_src
#+begin_src latex
  We import \ty{strconv} and \ty{runtime}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pt}>>=
  "strconv"
  "runtime"
#+end_src
