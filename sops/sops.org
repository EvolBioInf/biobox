#+begin_src latex
  \section*{Introduction}
  The sum-of-pairs score is a popular score for multiple sequence
  alignments. It is computed by iterating over the alignment
  columns. For each column, every pair of residues is scored and these
  scores are summed. Pairs of gaps are ignored. As an example, consider
  the alignment of three sequences in Figure~\ref{fig:msa}. The
  alignment consists of two columns. Let the score scheme be
  $\mbox{match}=1$, $\mbox{mismatch}=-3$, and $\mbox{gap}=-2$. Then the
  score of the first column is $1-3-3=-5$ and the score of the second
  column is $-2-2=-4$. So the sum-of-pairs score of the alignment is
  $-5-4=-9$.

  The program \ty{sops} reads one or more multiple sequence alignments
  and prints tier sum-or-pairs scores.

  \begin{figure}
    \begin{center}
      \ty{A-}\\
      \ty{A-}\\
      \ty{TT}
    \end{center}
    \caption{Small multiple sequence alignment; its sum-of-pairs score
      is -9 if match is 1, mismatch -3, and gap -2.}\label{fig:msa}
  \end{figure}

  \section*{Implementation}
  The outline of \ty{sops} has hooks for imports, functions, and the
  logic of the main function.
#+end_src
#+begin_src go <<sops.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:sops}>>
  )

  //<<Functions, Ch.~\ref{ch:sops}>>

  func main() {
	  //<<Main function, Ch.~\ref{ch:sops}>>
  }
#+end_src
#+begin_src latex
  In the main function we set the usage, declare the options, parse the
  options, and parse the multiple sequence alignments.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:sops}>>=
  //<<Set usage, Ch.~\ref{ch:sops}>>
  //<<Declare options, Ch.~\ref{ch:sops}>>
  //<<Parse options, Ch.~\ref{ch:sops}>>
  //<<Parse MSAs, Ch.~\ref{ch:sops}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage statement, an explanation of
  the purpose of \ty{sops}, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:sops}>>=
  u := "sops [-h] [option]... [foo.fasta]..."
  p := "Calculate the sum-of-pairs score of a multiple sequence alignment."
  e := "sops msa.fasta"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  We declare options for the version (\ty{-v}), match (\ty{-m}),
  mismatch (\ty{-i}), score matrix (\ty{-m}), and gap extension
  (\ty{-g}). We ignore gap opening.
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:sops}>>=
  var optV = flag.Bool("v", false, "version")
  var optA = flag.Float64("a", 1, "match")
  var optI = flag.Float64("i", -3, "mismatch")
  var optM = flag.String("m", "", "score matrix")
  var optG = flag.Float64("g", -2, "gap")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to a request for the version, as this
  stops \ty{sops}. We also get the score matrix.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:sops}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("sops")
  }
  //<<Get score matrix, Ch.~\ref{ch:sops}>>
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  The score matrix is either constructed from the match and mismatch
  scores, or read from a file.
#+end_src
#+begin_src go <<Get score matrix, Ch.~\ref{ch:sops}>>=
  var mat *pal.ScoreMatrix
  if *optM == "" {
	  mat = pal.NewScoreMatrix(*optA, *optI)
  } else {
	  f, err := os.Open(*optM)
	  if err != nil {
		  log.Fatalf("couldn't open score matrix %q",
			  (*optM))
	  }
	  defer f.Close()
	  mat = pal.ReadScoreMatrix(f)
  }
#+end_src
#+begin_src latex
  We import \ty{pal}, \ty{os}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "github.com/evolbioinf/pal"
  "os"
  "log"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are interpreted as input
  files. These are scanned with the function \ty{scan}, which takes as
  argument the score matrix and the gap score.
#+end_src
#+begin_src go <<Parse MSAs, Ch.~\ref{ch:sops}>>=
  f := flag.Args()
  clio.ParseFiles(f, scan, mat, *optG)
#+end_src
#+begin_src latex
  Inside \ty{scan}, we retrieve the score matrix and the gap score
  through type assertion, read the sequences into a multiple sequence
  alignment, check the multiple sequence alignment, and calculate its
  sum-of-pairs score.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:sops}>>=
  func scan(r io.Reader, args ...interface{}) {
	  mat := args[0].(*pal.ScoreMatrix)
	  g := args[1].(float64)
	  sc := fasta.NewScanner(r)
	  var msa [][]byte
	  for sc.ScanSequence() {
		  msa = append(msa, sc.Sequence().Data())
	  }
	  //<<Check MSA, Ch.~\ref{ch:sops}>>
	  //<<Calculate sum-of-pairs, Ch.~\ref{ch:sops}>>
  }
#+end_src
#+begin_src latex
  We import \ty{io} and \ty{fasta}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "io"
  "github.com/evolbioinf/fasta"
#+end_src
#+begin_src latex
  We read a sequence and append it to the growing multiple sequence
  alignment.
#+end_src
#+begin_src latex
  If sequences have unequal lengths, we are not dealing with a multiple
  sequence alignmet and bail with message.
#+end_src
#+begin_src go <<Check MSA, Ch.~\ref{ch:sops}>>=
  for i := 1; i < len(msa); i++ {
	  l1 := len(msa[i-1])
	  l2 := len(msa[i])
	  if l1 != l2 {
		  m := "sequence %d has length %d, " +
			  "but sequence %d has length %d; " +
			  "this doesn't look like an alignment"
		  log.Fatalf(m, i, l1, i+1, l2)
	  }
  }
#+end_src
#+begin_src latex
  The multiple sequence alignment is now an $(m\times n)$ matrix of
  residues. We score all pairs of residues in the MSA and print the
  result.
#+end_src
#+begin_src go <<Calculate sum-of-pairs, Ch.~\ref{ch:sops}>>=
  m := len(msa)
  n := len(msa[0])
  s := 0.0
  for i := 0; i < n; i++ {
	  for j := 0; j < m-1; j++ {
		  for k := j+1; k<m; k++ {
			  //<<Score pair of residues, Ch.~\ref{ch:sops}>>
		  }
	  }
  }
  fmt.Printf("%g\n", s)
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:sops}>>=
  "fmt"
#+end_src
#+begin_src latex
  A pair falls in one of three categories: It consists of two residues,
  in which case we read its score from the score matrix; or it consists
  of a gap and a residue, in which case its score is the gap score, or
  it consists of two gaps, in which case we ignore it.
#+end_src
#+begin_src go <<Score pair of residues, Ch.~\ref{ch:sops}>>=
  r1 := msa[j][i]
  r2 := msa[k][i]
  if r1 == '-' && r2 == '-' {
	  continue
  }
  if r1 == '-' || r2 == '-' {
	  s += g
  } else {
	  s += mat.Score(r1, r2)
  }
#+end_src
#+begin_src latex
  We've finished \ty{sops}, time to test it.
  \section*{Testing}
  Our testing code for \ty{sops} has hooks for imports and the testing logic.
#+end_src
#+begin_src go <<sops_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:sops}>>
  )

  func TestSops(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:sops}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests and then run them.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:sops}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Ch.~\ref{ch:sops}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:sops}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:sops}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We construct four tests, one for each option. All tests take as input
  the tiny alignment in Figure~\ref{fig:msa}, which is contained in
  \ty{test.fasta}.
#+end_src
#+begin_src go <<Construct tests, Ch.~\ref{ch:sops}>>=
  f := "test.fasta"
  test := exec.Command("./sops", "-a", "2", f)
  tests = append(tests, test)
  test = exec.Command("./sops", "-i", "-2", f)
  tests = append(tests, test)
  test = exec.Command("./sops", "-g", "-1", f)
  tests = append(tests, test)
  test = exec.Command("./sops", "-m", "sm.txt", f)
  tests = append(tests, test)
#+end_src
#+begin_src latex
  When running a test, we compare the result we get with the result we
  want, which is contained in files \ty{r1.txt}, \ty{r2.txt}, and so on.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:sops}>>=
  get, err := test.Output()
  if err != nil {
	  t.Errorf("couldn't run %q", test)
  }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil {
	  t.Errorf("couldn't open %q", f)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:sops}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src

