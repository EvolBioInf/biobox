#+begin_src latex
  \section*{Introduction}
  Segment plots, also known as dot plots, display a potentially large
  number of exact matches between two sequences. Each exact match is a
  segment, which is denoted by a quartet of numbers $(x_1, y_1, x_2,
  y_2)$, where $(x_1,y_1)$ is the start of the segment and $(x_2,y_2)$
  its end. The program \ty{mumPlot} (Ch.~\ref{ch:m2p}) generates such
  quartets from MUMmer output. Figure~\ref{fig:ps}A shows some sample
  input data and Figure~\ref{fig:ps}B its plot generated with
  \ty{plotSeg}. Like the other \ty{plot*} programs, \ty{plotSeg} calls
  \ty{gnuplot}~\cite{jan10:gnu} for rendering.

  \begin{figure}
    \begin{center}
      \begin{tabular}{cc}
	\textbf{A} & \textbf{B}\\
	\raisebox{4cm}{
	\begin{tabular}{cccc}
	  1 & 1 & 57 & 57\\
	  65 & 65 & 229 & 229\\
	  214 & 226 & 235 & 247\\
	  226 & 244 & 309 & 327\\
	  303 & 320 & 392 & 409
	\end{tabular}
	}
	&
	\scalebox{0.8}{\includegraphics{plotSeg}}
      \end{tabular}
    \end{center}
    \caption{Example data (\textbf{A}) plotted with \ty{plotSeg}
      (\textbf{B}).}\label{fig:ps}
  \end{figure}

  \section*{Implementation}
  The outline of \ty{plotSeg} contains hooks for imports, types,
  functions, and the logic of the main function.
#+end_src
#+begin_src go <<plotSeg.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:ps}>>
  )

  //<<Types, Ch.~\ref{ch:ps}>>
  //<<Functions, Ch.~\ref{ch:ps}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:ps}>>
  }
#+end_src
#+begin_src latex
  In the main function we set the usage, declare the options, parse the
  options, and parse the input files.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:ps}>>=
  //<<Set usage, Ch.~\ref{ch:ps}>>
  //<<Declare options, Ch.~\ref{ch:ps}>>
  //<<Parse options, Ch.~\ref{ch:ps}>>
  //<<Parse input files, Ch.~\ref{ch:ps}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{plotSeg}, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:ps}>>=
  u := "plotSeg [-h] [option]... [foo.dat]..."
  p := "Generate segment plots, also known as dot plots."
  e := "mum2plot eco_x_y.mum | plotSeg -d 7.5cm,7.5cm"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the obligatory version option, we declare options for the
  axes and the graphics device. We also declare a catch-all ``general
  option''. 
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:ps}>>=
  var optV = flag.Bool("v", false, "version")
  //<<Declare axis options, Ch.~\ref{ch:ps}>>
  //<<Declare device options, Ch.~\ref{ch:ps}>>
  //<<Declare general option, Ch.~\ref{ch:ps}>>
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "flag"
#+end_src
#+begin_src latex
  The user can label the axes and set their ranges.
  \ty{gnuplot} code.
#+end_src
#+begin_src go <<Declare axis options, Ch.~\ref{ch:ps}>>=
  var optX = flag.String("x", "", "x-label")
  var optY = flag.String("y", "", "y-label")
  var optXX = flag.String("X", "*:*", "x-range")
  var optYY = flag.String("Y", "*:*", "y-range")
#+end_src
#+begin_src latex
  Instead of showing the plot in a window, the user can write it as
  encapsulated postscript and set its size. The user can also ask for
  the \ty{gnuplot} script of the plot.
#+end_src
#+begin_src go <<Declare device options, Ch.~\ref{ch:ps}>>=
  var optP = flag.String("p", "", "encapsulated postscript file")
  var optD = flag.String("d", "x[cm],y[cm]", "dimensions of postscript plot " +
	  "plot in inch or cm")
  var optS = flag.String("s", "", "write gnuplot script to file")
#+end_src
#+begin_src latex
  The ``general option'' is a switch for submitting arbitrary
  \ty{gnuplot} code.
#+end_src
#+begin_src go <<Declare general option, Ch.~\ref{ch:ps}>>=
  var optG = flag.String("g", "", "gnuplot code")
#+end_src
#+begin_src latex
  We parse the options and respond to a request for the version first
  (\ty{-v}), as this terminates \ty{plotSeg}. Then we declare the
  variable \ty{opts} for holding the options and collect their values.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:ps}>>=
  flag.Parse()
  //<<Respond to \ty{-v}, Ch.~\ref{ch:ps}>>
  opts := new(Options)
  //<<Collect option values, Ch.~\ref{ch:ps}>>
#+end_src
#+begin_src latex
  We respond to \ty{-v} by printing a standardized message.
#+end_src
#+begin_src go <<Respond to \ty{-v}, Ch.~\ref{ch:ps}>>=
  if *optV {
	  util.PrintInfo("plotSeg")
  }
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  We declare the type for holding the options and fill it with fields as
  we go along.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:ps}>>=
  type Options struct {
	  //<<\ty{Options} fields, Ch.~\ref{ch:ps}>>
  }
#+end_src
#+begin_src latex
  We collect the axis labels, axis ranges, the plot size, and the
  graphics window. This is wxt by default, but if we are running on
  macOS, we switch to qt. We also collect the names of the files for
  postscript and \ty{gnuplot} output.
#+end_src
#+begin_src go <<Collect option values, Ch.~\ref{ch:ps}>>=
  opts.Xlab = *optX
  opts.Ylab = *optY
  opts.Xrange = *optXX
  opts.Yrange = *optYY
  opts.Dim = *optD
  opts.Win = "wxt"
  if runtime.GOOS == "darwin" { opts.Win = "qt" }
  opts.Ps = *optP
  opts.Script = *optS
  opts.Gp = *optG
#+end_src
#+begin_src latex
  We import \ty{runtime}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "runtime"
#+end_src
#+begin_src latex
  We add the fields we just used to \ty{Options}.
#+end_src
#+begin_src go <<\ty{Options} fields, Ch.~\ref{ch:ps}>>=
  Xlab, Ylab, Xrange, Yrange, Dim string
  Width, Height float64
  Win, Ps, Script, Gp string
#+end_src
#+begin_src latex
  The remaining tokens on the command line are taken as input
  files. The function \ty{ParseFiles} applies the function \ty{scan} to
  each input file. \ty{scan} takes as argument the options.
#+end_src
#+begin_src go <<Parse input files, Ch.~\ref{ch:ps}>>=
  files := flag.Args()
  clio.ParseFiles(files, scan, opts)
#+end_src
#+begin_src latex
  Inside \ty{scan}, we retrieve the options, read the segments, and plot
  them.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:ps}>>=
  func scan(r io.Reader, args ...interface{}) {
	  opts := args[0].(*Options)
	  //<<Read segments, Ch.~\ref{ch:ps}>>
	  //<<Construct output stream, Ch.~\ref{ch:ps}>>
	  //<<Plot segments, Ch.~\ref{ch:ps}>>
  }
#+end_src
#+begin_src latex
  We import \ty{io}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "io"
#+end_src
#+begin_src latex
  We read the segments, skip comments, and check each data line has four
  columns. If not, something has gone wrong and we bail.
#+end_src
#+begin_src go <<Read segments, Ch.~\ref{ch:ps}>>=
  sc := bufio.NewScanner(r)
  var segments [][]string
  for sc.Scan() {
	  row := sc.Text()
	  if row[0] == '#' { continue }
	  fields := strings.Fields(row)
	  l := len(fields)
	  if l != 4 {
		  log.Fatalf("get %d columns, want 4\n", l)
	  }
	  segments = append(segments, fields)
  }
#+end_src
#+begin_src latex
  We import \ty{bufio}, \ty{strings}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "bufio"
  "strings"
  "log"
#+end_src
#+begin_src latex
  The output stream is either the standard input stream of the
  \ty{gnuplot} command, or a script of \ty{gnuplot} code.
#+end_src
#+begin_src go <<Construct output stream, Ch.~\ref{ch:ps}>>=
  var w io.WriteCloser
  var gcmd *exec.Cmd
  var err error
  if opts.Script == "" {
	  gcmd = exec.Command("gnuplot")
	  w, err = gcmd.StdinPipe()
	  if err != nil { log.Fatal(err) }
  } else {
	  w, err = os.Create(opts.Script)
	  if err != nil { log.Fatal(err) }
  }
#+end_src
#+begin_src latex
  We import \ty{exec} and \ty{os}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "os/exec"
  "os"
#+end_src
#+begin_src latex
  We use a Go routine to write the \ty{gnuplot} code to that output
  stream, which we also close inside that routine. After the Go routine,
  we run \ty{gnuplot}, unless the user opted for the script instead.
#+end_src
#+begin_src go <<Plot segments, Ch.~\ref{ch:ps}>>=
  done := make(chan struct{})
  go func() {
	  //<<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:ps}>>
	  //<<Close output stream, Ch.~\ref{ch:ps}>>
	  done <- struct{}{}
  }()
  if opts.Script == "" {
	  //<<Run \ty{gnuplot}, Ch.~\ref{ch:ps}>>
  }
  <-done
#+end_src

#+begin_src latex
  The \ty{gnuplot} code describes the terminal, the axes, the plot, and
  the segments.
#+end_src
#+begin_src go <<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:ps}>>=
  //<<Write terminal, Ch.~\ref{ch:ps}>>
  //<<Write axes, Ch.~\ref{ch:ps}>>
  //<<Write plot, Ch.~\ref{ch:ps}>>
  //<<Write segments, Ch.~\ref{ch:ps}>>
#+end_src
#+begin_src latex
  The terminal is either monochrome encapsulate postscript or a
  window. If it is a window, that window is persistent. If the user set
  the size of the postscript plot, we pass that on.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:ps}>>=
  t := "set terminal"
  if opts.Ps != "" {
	  t += " eps monochrome"
  } else {
	  t += " " + opts.Win + " persist"
  }
  if opts.Dim[0] != 'x' && opts.Ps != "" {
	  t += " size " + opts.Dim
  }
  fmt.Fprintf(w, "%s\n", t)
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:ps}>>=
  "fmt"
#+end_src
#+begin_src latex
  If the terminal is postscript, we also set the output file.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:ps}>>=
  if opts.Ps != "" {
	  fmt.Fprintf(w, "set output \"%s\"\n", opts.Ps)
  }
#+end_src
#+begin_src latex
  We set the x2 axis as the primary x axis. This involves removing the
  tics from the x axis and switching on the x2 axis and mirroring its
  tic marks. We also set the x2 range and the y range. The y range is
  inverted. Then we label the x axis and the y axis. The label on the y
  axis is rotated by -90 degrees to track the direction of the sequence.
#+end_src
#+begin_src go <<Write axes, Ch.~\ref{ch:ps}>>=
  fmt.Fprintf(w, "set format x ''\n")
  fmt.Fprintf(w, "unset xtics\n")
  fmt.Fprintf(w, "set x2tics mirror\n")
  fmt.Fprintf(w, "set x2range[%s]\n", opts.Xrange)
  fmt.Fprintf(w, "set yrange [%s] reverse\n", opts.Yrange)
  fmt.Fprintf(w, "set x2label '%s'\n", opts.Xlab)
  fmt.Fprintf(w, "set ylabel rotate by -90 '%s'\n", opts.Ylab)
#+end_src
#+begin_src latex
  Just before drawing the actual plot, we enter the \ty{gnuplot} code
  submitted by the user. Then we write the plot as an untitled black
  line plot.
#+end_src
#+begin_src go <<Write plot, Ch.~\ref{ch:ps}>>=
  if opts.Gp != "" { fmt.Fprintf(w, "%s\n", opts.Gp) }
  fmt.Fprintf(w, "plot \"-\" t '' w l lc \"black\"\n")
#+end_src
#+begin_src latex
  The segments are written as pairs of points separated by a blank
  line. This is interpreted by \ty{gnuplot} as a line disconnected from
  the next line, a \emph{segment}.
#+end_src
#+begin_src go <<Write segments, Ch.~\ref{ch:ps}>>=
  for _, s := range segments {
	  fmt.Fprintln(w, s[0], s[1])
	  fmt.Fprintln(w, s[2], s[3])
	  fmt.Fprintln(w)
  }
#+end_src
#+begin_src latex
  We close the output stream.
#+end_src
#+begin_src go <<Close output stream, Ch.~\ref{ch:ps}>>=
  w.Close()
#+end_src
#+begin_src latex
  We run \ty{gnuplot} and check for errors.
#+end_src
#+begin_src go <<Run \ty{gnuplot}, Ch.~\ref{ch:ps}>>=
  err = gcmd.Run()
  if err != nil {
	  log.Fatal(err)
  }
#+end_src
#+begin_src latex
  The program \ty{plotSeg} is finished, let's test it.
  \section*{Testing}
  Our program for testing \ty{plotSeg} contains hooks for imports and
  the testing logic.
#+end_src
#+begin_src go <<plotSeg_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:ps}>>
  )

  func TestPlotSeg(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:ps}>>
  }
#+end_src
#+begin_src latex
  We write the individual tests and run them in a loop. Each test is
  written to the same unique \ty{gnuplot} file, which we remove again
  after the tests.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:ps}>>=
  gf, err := ioutil.TempFile(".", "tmp_*.gp")
  if err != nil { log.Fatal("cant open output file") }
  g := gf.Name()
  var tests []*exec.Cmd
  //<<Construct tests, Ch.~\ref{ch:ps}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:ps}>>
  }
  err = os.Remove(g)
  if err != nil { log.Fatalf("can't delete %q", g) }
#+end_src
#+begin_src latex
  We import \ty{ioutil}, \ty{log}, \ty{exec}, and \ty{os}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:ps}>>=
  "io/ioutil"
  "log"
  "os/exec"
  "os"
#+end_src
#+begin_src latex
  We test setting axis labels, ranges, plot size, and submitting
  \ty{gnuplot} code.
#+end_src
#+begin_src go <<Construct tests, Ch.~\ref{ch:ps}>>=
  //<<Test axis labels, Ch.~\ref{ch:ps}>>
  //<<Test axis ranges, Ch.~\ref{ch:ps}>>
  //<<Test plot size, Ch.~\ref{ch:ps}>>
  //<<Test \ty{gnuplot} code, Ch.~\ref{ch:ps}>>
#+end_src
#+begin_src latex
  We begin by running \ty{plotSeg} on the example data in \ty{test.dat}
  without any other options. Then we set the x-label, the y-label, and
  both.
#+end_src
#+begin_src go <<Test axis labels, Ch.~\ref{ch:ps}>>=
  f := "test.dat"
  te := exec.Command("./plotSeg", "-s", g, f)
  tests = append(tests, te)
  te = exec.Command("./plotSeg", "-s", g, "-x", "x", f)
  tests = append(tests, te)
  te = exec.Command("./plotSeg", "-s", g, "-y", "y", f)
  tests = append(tests, te)
  te = exec.Command("./plotSeg", "-s", g, "-x", "x",
	  "-y", "y", f)
  tests = append(tests, te)
#+end_src
#+begin_src latex
  We set the x-range, the y-range, and both.
#+end_src
#+begin_src go <<Test axis ranges, Ch.~\ref{ch:ps}>>=
  te = exec.Command("./plotSeg", "-s", g, "-X", "100:500", f)
  tests = append(tests, te)
  te = exec.Command("./plotSeg", "-s", g, "-Y", "100:500", f)
  tests = append(tests, te)
  te = exec.Command("./plotSeg", "-s", g, "-X", "100:500",
	  "-Y", "100:500", f)
  tests = append(tests, te)
#+end_src
#+begin_src latex
  We set the plot dimensions.
#+end_src
#+begin_src go <<Test plot size, Ch.~\ref{ch:ps}>>=
  te = exec.Command("./plotSeg", "-s", g, "-d", "5,6", f)
  tests = append(tests, te)
#+end_src
#+begin_src latex
  We set a title via \ty{gnuplot} code.
#+end_src
#+begin_src go <<Test \ty{gnuplot} code, Ch.~\ref{ch:ps}>>=
  te = exec.Command("./plotSeg", "-s", g, "-g",
	  "\"External Title\"")
#+end_src
#+begin_src latex
  For each test we compare what we get with what we want, which is
  stored in a file the name of which we still need to construct.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:ps}>>=
  err = test.Run()
  if err != nil { log.Fatalf("can't run %q", test) }
  get, err := ioutil.ReadFile(g)
  if err != nil { log.Fatalf("can't read %q", g) }
  //<<Construct file name, Ch.~\ref{ch:ps}>>
  want, err := ioutil.ReadFile(f)
  if err != nil { log.Fatalf("can't read %q", f) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n",
		  string(get), string(want))
  }
#+end_src
#+begin_src latex
  We import \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:ps}>>=
  "bytes"
#+end_src
#+begin_src latex
  On default systems, the results we want are stored in files
  \ty{results/r1.gp}, \ty{results/r2.gp}, and so on. On darwin systems,
  the names are extended by ``d''.
#+end_src
#+begin_src go <<Construct file name, Ch.~\ref{ch:ps}>>=
  f = "results/r" + strconv.Itoa(i+1)
  if runtime.GOOS == "darwin" {
	  f += "d"
  }
  f += ".gp"
#+end_src
#+begin_src latex
  We import \ty{strconv} and \ty{runtime}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:ps}>>=
  "strconv"
  "runtime"
#+end_src

