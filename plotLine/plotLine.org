#+begin_src latex
  \section*{Introduction}
  The program \ty{plotLine} plots lines using
  \ty{gnuplot}~\cite{jan10:gnu}. It takes as input either two or three
  columns of data. The first two columns are the x- and y-coordinates,
  the optional third column is the group. Figure~\ref{fig:pl}A shows
  some example data for two groups, g1 and g2, and Figure~\ref{fig:pl}B
  its plot.

  \begin{figure}
    \begin{center}
      \begin{tabular}{cc}
	\textbf{A} & \textbf{B}\\
	\begin{tabular}{lll}
	  1 & 1 & g1\\
	  2 & 2 & g1\\
	  4 & 4 & g1\\
	  1 & 2 & g2\\
	  2 & 4 & g2\\
	  4 & 8 & g2
	\end{tabular}
	&
	\raisebox{-2.5cm}{\includegraphics{plotLine}}
      \end{tabular}
    \end{center}
    \caption{Example data (\textbf{A}) plotted with \ty{plotLine}
      (\textbf{B}).}\label{fig:pl}
  \end{figure}

  \section*{Implementation}
  The outline of \ty{plotLine} has hooks for imports, types, functions,
  and the logic of the main function.
#+end_src
#+begin_src go <<plotLine.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:pl}>>
  )
  //<<Types, Ch.~\ref{ch:pl}>>
  //<<Functions, Ch.~\ref{ch:pl}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:pl}>>
  }
#+end_src
#+begin_src latex
  In the main function we prepare the \ty{log} package, set the usage,
  declare the options, and parse the options. Then we set the type of
  the output window and parse the input files.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:pl}>>=
  util.PrepLog("plotLine")
  //<<Set usage, Ch.~\ref{ch:pl}>>
  //<<Declare options, Ch.~\ref{ch:pl}>>
  //<<Parse options, Ch.~\ref{ch:pl}>>
  //<<Set type of output window, Ch.~\ref{ch:pl}>>
  //<<Parse input files, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_export latex
We import \ty{util}.
#+end_export
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{plotLine}, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:pl}>>=
  u := "plotLine [-h] [option]... [file]..."
  p := "Plot lines from columns of x/y data " +
	  "and an optional group column."
  e := "plotLine foo.dat"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  Apart from the version, we declare options concerning the axes, the
  plot type, and the graphics device. We also declare a catch-all
  ``general option''.
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:pl}>>=
  optV := flag.Bool("v", false, "version")
  //<<Declare axes options, Ch~\ref{ch:pl}>>
  //<<Declare plot type options, Ch.~\ref{ch:pl}>>
  //<<Declare device options, Ch.~\ref{ch:pl}>>
  //<<Declare general option, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "flag"
#+end_src
#+begin_src latex
  The options for axes define their labels, ranges, scales, and whether
  or not one or both of them are unset.
#+end_src
#+begin_src go <<Declare axes options, Ch~\ref{ch:pl}>>=
  optX := flag.String("x", "", "x-label")
  optY := flag.String("y", "", "y-label")
  optXX := flag.String("X", "*:*", "x-range")
  optYY := flag.String("Y", "*:*", "y-range")
  optL := flag.String("l", "", "log-scale (x|y|xy)")
  optU := flag.String("u", "", "unset axis (x|y|xy)")
#+end_src
#+begin_src latex
  By default, the plot consists of lines. But the user can opt for lines
  and points, or lines only. She can also opt to write the \ty{gnuplot}
  script to file.
#+end_src
#+begin_src go <<Declare plot type options, Ch.~\ref{ch:pl}>>=
  optPP := flag.Bool("P", false, "points only")
  optLL := flag.Bool("L", false, "lines and points")
  optS := flag.String("s", "", "write gnuplot script to file")
#+end_src
#+begin_src latex
  The default output destination is the screen and the user can set the
  terminal. Alternatively, the user can write the output to a file of
  encapsulated postscript. We provide three default plot dimensions,
  $640\times 384$ pixels for screens, $5\times 3.5$ in for postscript,
  and $79\times 24$ characters for the ``dumb'' terminal. Users can also
  set the dimensions themselves.
#+end_src
#+begin_src go <<Declare device options, Ch.~\ref{ch:pl}>>=
  term := util.GetWindow()
  optT := flag.String("t", term,
	  "terminal, wxt|qt|x11|...")
  optP := flag.String("p", "", "encapsulated postscript file")
  defScrDim := "640,384"
  defPsDim := "5,3.5"
  defDumbDim := "79,24"
  optD := flag.String("d", defScrDim, "plot dimensions; " +
	  "pixels for screen, " + defPsDim + " in for ps, " +
	  defDumbDim + " char for dumb")
#+end_src
#+begin_src latex
  At its core, \ty{gnuplot} is a graphing programming language. To make
  the most of the resulting versatility, power users can enter arbitrary
  \ty{gnuplot} code.
#+end_src
#+begin_src go <<Declare general option, Ch.~\ref{ch:pl}>>=
  optG := flag.String("g", "", "gnuplot code")
#+end_src
#+begin_src latex
  We parse the options and respond to \ty{-v} first, as this might
  terminate \ty{plotLine}. Then we collect the option values.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:pl}>>=
  flag.Parse()
  //<<Respond to \ty{-v}, Ch.~\ref{ch:pl}>>
  args := new(Args)
  //<<Collect option values, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  We respond to \ty{-v} by printing information about \ty{plotLine}.
#+end_src
#+begin_src go <<Respond to \ty{-v}, Ch.~\ref{ch:pl}>>=
  if *optV {
	  util.PrintInfo("plotLine")
  }
#+end_src
#+begin_src latex
  We declare the type \ty{Args} and specify its fields as we go along.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:pl}>>=
  type Args struct {
	  //<<\ty{Args} fields, Ch.~\ref{ch:pl}>>
  }
#+end_src
#+begin_src latex
  We collect the option values for, \ty{-x}, \ty{-y}, \ty{-X}, \ty{-Y},
  \ty{-u}, \ty{-d}, \ty{-P}, \ty{-L}, \ty{-l}, \ty{-s}, \ty{-p}, and
  \ty{-g}.
#+end_src
#+begin_src go <<Collect option values, Ch.~\ref{ch:pl}>>=
  args.Xlab = *optX
  args.Ylab = *optY
  args.Xrange = *optXX
  args.Yrange = *optYY
  args.Unset = *optU
  args.Dim = *optD
  args.Points = *optPP
  args.LinesPoints = *optLL
  args.Log = *optL
  args.Script = *optS
  args.Ps = *optP
  args.Gp = *optG
#+end_src
#+begin_src latex
  We add the corresponding fields to the structure \ty{Args}.
#+end_src
#+begin_src go <<\ty{Args} fields, Ch.~\ref{ch:pl}>>=
  Xlab, Ylab, Xrange, Yrange, Unset, Dim string
  Points, LinesPoints bool
  Log, Script, Ps, Gp string
#+end_src
#+begin_src latex
  If the user requested postscript output and didn't set a size, we set
  the default postscript size. Similarly, if the user requested the dumb
  terminal and didn't set a size, we set the default dumb terminal size.
#+end_src
#+begin_src go  <<Collect option values, Ch.~\ref{ch:pl}>>=
  args.Win = *optT
  if args.Dim == defScrDim {
	  if args.Ps != "" {
		  args.Dim = defPsDim
	  } else if args.Win == "dumb" {
		  args.Dim = defDumbDim
	  }
  }
#+end_src
#+begin_src latex
  We check the existence of the window passed.
#+end_src
#+begin_src go <<Set type of output window, Ch.~\ref{ch:pl}>>=
  util.CheckWindow(args.Win)
#+end_src
#+begin_src latex 
  We add the \ty{Win} field to \ty{Args}.
#+end_src
#+begin_src go <<\ty{Args} fields, Ch.~\ref{ch:pl}>>=
  Win string
#+end_src
#+begin_src latex
  The remaining tokens on the command line are taken as input
  files. These are parsed with the function \ty{ParseFiles}, which
  applies the function \ty{scan} to each file. \ty{scan}, in turn, takes
  as argument the variable \ty{args} we just filled.
#+end_src
#+begin_src go <<Parse input files, Ch.~\ref{ch:pl}>>=
  files := flag.Args()
  clio.ParseFiles(files, scan, args)
#+end_src
#+begin_src latex
  Inside \ty{scan}, we retrieve the variable \ty{args} by type
  assertion, read the data, and plot it.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:pl}>>=
  func scan(r io.Reader, a ...interface{}) {
	  args := a[0].(*Args)
	  //<<Read data, Ch.~\ref{ch:pl}>>
	  //<<Extract categories, Ch.~\ref{ch:pl}>>
	  //<<Plot data, Ch.~\ref{ch:pl}>>
  }
#+end_src
#+begin_src latex
  We import \ty{io}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "io"
#+end_src
#+begin_src latex
  While reading the data, we skip comments. For each data point we are
  either given a category, or we add an empty category. Having read the
  data, we check the number of columns.
#+end_src
#+begin_src go <<Read data, Ch.~\ref{ch:pl}>>=
  var data [][]string
  sc := bufio.NewScanner(r)
  for sc.Scan() {
	  if sc.Text()[0] == '#' { continue }
	  f := strings.Fields(sc.Text())
	  if len(f) == 2 { f = append(f, "") }
	  data = append(data, f)
  }
  //<<Check number of columns, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  We import \ty{bufio} and \ty{strings}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "bufio"
  "strings"
#+end_src
#+begin_src latex
  If the data doesn't consist of either two or three columns, there's
  bound to be a fundamental problem, so we bail with a friendly message.
#+end_src
#+begin_src go <<Check number of columns, Ch.~\ref{ch:pl}>>=
  ncol := 0
  if len(data) > 0 {
	  ncol = len(data[0])
  }
  if ncol < 2 || ncol > 3 {
	  m := "there should be 2 or 3 columns " +
		  "in the input, but you have %d\n"
	  log.Fatalf(m, ncol)
  }
#+end_src
#+begin_src latex
  We import \ty{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "log"
#+end_src
#+begin_src latex
  To extract the categories, we track them with a map and store them in
  a slice.
#+end_src
#+begin_src go <<Extract categories, Ch.~\ref{ch:pl}>>=
  var categories []string
  cm := make(map[string]bool)
  for _, d := range data {
	  if !cm[d[2]] {
		  categories = append(categories, d[2])
		  cm[d[2]] = true
	  }
  }
#+end_src
#+begin_src latex
  We plot the data by constructing an output stream. We write
  \ty{gnuplot} code to this output stream inside a goroutine and close
  it again. Outside of the goroutine we run \ty{gnuplot}, unless the
  user opted for the script as output.
#+end_src
#+begin_src go <<Plot data, Ch.~\ref{ch:pl}>>=
  //<<Construct output stream, Ch.~\ref{ch:pl}>>
  done := make(chan struct{})
  go func() {
	  //<<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:pl}>>
	  //<<Close output stream, Ch.~\ref{ch:pl}>>
	  done <- struct{}{}
  }()
  if args.Script == "" {
	  //<<Run \ty{gnuplot}, Ch.~\ref{ch:pl}>>
  }
  <-done
#+end_src
#+begin_src latex
  The output stream is either the standard input stream of the
  \ty{gnuplot} command, or a script, the name of which was supplied by
  the user.
#+end_src
#+begin_src go <<Construct output stream, Ch.~\ref{ch:pl}>>=
  var w io.WriteCloser
  var gcmd *exec.Cmd
  var err error
  if args.Script == "" {
	  gcmd = exec.Command("gnuplot")
	  w, err = gcmd.StdinPipe()
	  if err != nil { log.Fatal(err) }
  } else {
	  w, err = os.Create(args.Script)
	  if err != nil { log.Fatal(err) }
  }
#+end_src
#+begin_src latex
  We import \ty{exec} and \ty{os}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "os/exec"
  "os"
#+end_src
#+begin_src latex
  When writing the \ty{gnuplot} code, we begin with the terminal. Then
  we write the axes, the plot(s), and finally the data.
#+end_src
#+begin_src go <<Write \ty{gnuplot} code to output stream, Ch.~\ref{ch:pl}>>=
  //<<Write terminal, Ch.~\ref{ch:pl}>>
  //<<Write axes, Ch.~\ref{ch:pl}>>
  //<<Write plot, Ch.~\ref{ch:pl}>>
  //<<Write data, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  The terminal is either encapsulated postscript or a window. If it is
  an interactive window, that window is persistent. We also set the plot
  size.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pl}>>=
  t := "set terminal"
  if args.Ps != "" {
	  t += " postscript eps color"
  } else {
	  t += " " + args.Win
  }
  if util.IsInteractive(args.Win) && args.Ps == "" {
	  t += " persist"
  }
  t += " size " + args.Dim
  fmt.Fprintf(w, "%s\n", t)
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:pl}>>=
  "fmt"
#+end_src
#+begin_src latex
  \ty{gnuplot} version 5.4 patch level 3 generates screen plots with red
  background---at least on macOS. We make sure our plots are white.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pl}>>=
  if util.IsInteractive(args.Win) && args.Ps == "" {
	  c := "set object 1 rectangle from screen 0,0 " +
		  "to screen 1,1 fillcolor rgb 'white' behind"
	  fmt.Fprintf(w, "%s\n", c)
  }
#+end_src
#+begin_src latex
   If the terminal is postscript, we also set the output file.
#+end_src
#+begin_src go <<Write terminal, Ch.~\ref{ch:pl}>>=
  if args.Ps != "" {
	  fmt.Fprintf(w, "set output \"%s\"\n", args.Ps)
  }
#+end_src
#+begin_src latex
  For the axes we write the labels, the log scale, and note the axes
  that have been unset.
#+end_src
#+begin_src go <<Write axes, Ch.~\ref{ch:pl}>>=
  //<<Write axis labels, Ch.~\ref{ch:pl}>>
  //<<Write log scale, Ch.~\ref{ch:pl}>>
  //<<Unset axes, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  We label the x-axis and the y-axis.
#+end_src
#+begin_src go <<Write axis labels, Ch.~\ref{ch:pl}>>=
  if args.Xlab != "" {
	  fmt.Fprintf(w, "set xlabel \"%s\"\n", args.Xlab)
  }
  if args.Ylab != "" {
	  fmt.Fprintf(w, "set ylabel \"%s\"\n", args.Ylab)
  }
#+end_src
#+begin_src latex
  The user can log-scale the x-axis, the y-axis, or both.
#+end_src
#+begin_src go <<Write log scale, Ch.~\ref{ch:pl}>>=
  if strings.ContainsAny(args.Log, "xX") {
	  fmt.Fprintf(w, "set logscale x\n")
  }
  if strings.ContainsAny(args.Log, "yY") {
	  fmt.Fprintf(w, "set logscale y\n")
  }
#+end_src
#+begin_src latex
  We unset the required axes.
#+end_src
#+begin_src go <<Unset axes, Ch.~\ref{ch:pl}>>=
  if strings.ContainsAny(args.Unset, "xX") {
	  fmt.Fprintf(w, "unset xtics\n")
  }
  if strings.ContainsAny(args.Unset, "yY") {
	  fmt.Fprintf(w, "unset ytics\n")
  }
#+end_src
#+begin_src latex
  The plot consists of a plot command, a style, and a separate plot
  for each category.
#+end_src
#+begin_src go <<Write plot, Ch.~\ref{ch:pl}>>=
  //<<Write plot command, Ch.~\ref{ch:pl}>>
  //<<Construct style, Ch.~\ref{ch:pl}>>
  //<<Write one plot per category, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  Right in front of the plot command we print the external \ty{gnuplot}
  code, which we mark by comments.
#+end_src
#+begin_src go <<Write plot command, Ch.~\ref{ch:pl}>>=
  if args.Gp != "" {
	  m := "#Start external\n%s\n#End external\n"
	  fmt.Fprintf(w, m, args.Gp)
  }
  fmt.Fprintf(w, "plot[%s][%s]", args.Xrange, args.Yrange)
#+end_src
#+begin_src latex
  The default style is ``lines'', or \ty{l}. However, the user might
  have opted either for ``linespoints'' (\ty{lp}), or for ``points''
  (\ty{p}). The line is black if there is only one category and we
  always use dots, which correspond to line type 7, as points.
#+end_src
#+begin_src go <<Construct style, Ch.~\ref{ch:pl}>>=
  style := "l"
  if args.Points { style = "p pt 7" }
  if args.LinesPoints { style = "lp pt 7" }
  if len(categories) == 1 {
	  style += " lc \"black\""
  }
#+end_src
#+begin_src latex
  We write the instruction for the first plot and then append an
  instruction for each remaining category.
#+end_src
#+begin_src go <<Write one plot per category, Ch.~\ref{ch:pl}>>=
  fmt.Fprintf(w, " \"-\" t \"%s\" w %s", categories[0], style)
  for i := 1; i < len(categories); i++ {
	  fmt.Fprintf(w, ", \"-\" t \"%s\" w %s",
		  categories[i], style)
  }
  fmt.Fprintf(w, "\n")
#+end_src
#+begin_src latex
  For each category, we write the corresponding data set and terminate
  it with \ty{e}.
#+end_src
#+begin_src go <<Write data, Ch.~\ref{ch:pl}>>=
  for i, c := range categories {
	  if i > 0 { fmt.Fprintf(w, "e\n") }
	  for _, d := range data {
		  if d[2] == c {
			  fmt.Fprintf(w, "%s\t%s\n",
				  d[0], d[1])
		  }
	  }
  }
#+end_src
#+begin_src latex
  We close the output stream.
#+end_src
#+begin_src go <<Close output stream, Ch.~\ref{ch:pl}>>=
  w.Close()
#+end_src
#+begin_src latex
  We run \ty{gnuplot}, check for errors, and print its output, if any.
#+end_src
#+begin_src go <<Run \ty{gnuplot}, Ch.~\ref{ch:pl}>>=
  out, err := gcmd.Output()
  util.CheckGnuplot(err)
  if len(out) > 0 {
	  fmt.Printf("%s", out)
  }
#+end_src
#+begin_src latex
  We've finished \ty{plotLine}, let's test it.
  \section*{Testing}
  Out testing outline has hooks for imports and the testing logic.
#+end_src
#+begin_src go <<plotLine_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:pl}>>
  )

  func TestPlotLine(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:pl}>>
  }
#+end_src
#+begin_src latex
  We prepare a set of tests and then run them. In each test we write the
  output to a temporary \ty{gnuplot} script, so that we can compare what
  we get to what we want. After testing, we remove the \ty{gnuplot}
  script again.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:pl}>>=
  var tests []*exec.Cmd
  gf, err := ioutil.TempFile(".", "tmp_*.gp")
  if err != nil { log.Fatal("can't open script file") }
  g := gf.Name()
  //<<Prepare tests, Ch.~\ref{ch:pl}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:pl}>>
  }
  err = os.Remove(g)
  if err != nil { log.Fatalf("can't delete %q", g) }
#+end_src
#+begin_src latex
  We import \ty{os} and \ty{ioutil}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pl}>>=
  "os"
  "io/ioutil"
#+end_src
#+begin_src latex
  We create six sets of tests, lines \& points, axis labels, plot size,
  log-scaling, ranges, and combinations of log-scaling and ranges. We
  also unset axes' tic marks, set external code, and use the dumb
  terminal.
#+end_src
#+begin_src go <<Prepare tests, Ch.~\ref{ch:pl}>>=
  //<<Test lines and dots, Ch.~\ref{ch:pl}>>
  //<<Test axis labels, Ch.~\ref{ch:pl}>>
  //<<Test plot size, Ch.~\ref{ch:pl}>>
  //<<Test log-scaling, Ch.~\ref{ch:pl}>>
  //<<Test ranges, Ch.~\ref{ch:pl}>>
  //<<Test combinations of log-scaling and ranges, Ch.~\ref{ch:pl}>>
  //<<Test unsetting axes, Ch.~\ref{ch:pl}>>
  //<<Test external code, Ch.~\ref{ch:pl}>>
  //<<Test dumb terminal, Ch.~\ref{ch:pl}>>
#+end_src
#+begin_src latex
  We have two sets of input data, \ty{test3.dat} with the three columns
  of data shown in Figure~\ref{fig:pl}A, and \ty{test2.dat}, with just
  the first two columns of group g1.

  We begin testing by drawing a plot of each, then we concentrate on
  \ty{test3.dat}. Every time our output is a \ty{gnuplot} file, which we
  can later compare with the output we want.
#+end_src
#+begin_src go <<Test lines and dots, Ch.~\ref{ch:pl}>>=
  test := exec.Command("./plotLine", "-s", g, "test2.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g, "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g, "-P", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g, "-L", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pl}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We label the axes individually and then both of them.
#+end_src
#+begin_src go <<Test axis labels, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-x", "x", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-y", "y", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-x", "x", "-y", "y", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We set the plot size in combination with postscript output.
#+end_src
#+begin_src go <<Test plot size, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-p", "test.ps", "-d", "340,340", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We set the x-axis to log-scale, the y-axis, and both of them.
#+end_src
#+begin_src go <<Test log-scaling, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-l", "x", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-l", "y", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-l", "xy", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We set a range for the x-axis, for the y-axis, and for both axes.
#+end_src
#+begin_src go <<Test ranges, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-X", "0.1:10", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-Y", "0.2:100", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g, "-X", "0.1:10",
	  "-Y", "0.2:100", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We combine log-scaling and limits.
#+end_src
#+begin_src go <<Test combinations of log-scaling and ranges, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-X", "0.1:10", "-l", "x", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-Y", "0.2:100", "-l", "x", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-X", "0.1:10", "-l", "xy", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-X", "0.1:10", "-Y", "0.2:100", "-l", "xy", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We unset the x-axis, the y-axis, and both.
#+end_src
#+begin_src go <<Test unsetting axes, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-u", "x", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-u", "y", "test3.dat")
  tests = append(tests, test)
  test = exec.Command("./plotLine", "-s", g,
	  "-u", "xy", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We set a title using external code.
#+end_src
#+begin_src go <<Test external code, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-g", "set title \"External Title\"",
	  "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  We test the dumb terminal.
#+end_src
#+begin_src go <<Test dumb terminal, Ch.~\ref{ch:pl}>>=
  test = exec.Command("./plotLine", "-s", g,
	  "-t", "dumb", "test3.dat")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  For each test we compare what we get in \ty{g} with what we want
  in \ty{results/r1.gp}, \ty{results/r2.gp}, and so on. On a darwin
  system, the results files are called \ty{results/r1d.gp},
  \ty{results/r2d.gp}, and so on.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:pl}>>=
  err := test.Run()
  if err != nil { log.Fatalf("can't run %q", test) }
  get, err := ioutil.ReadFile(g)
  f := "results/r" + strconv.Itoa(i+1) 
  if runtime.GOOS == "darwin" { f += "d" }
  f += ".gp"
  want, err := ioutil.ReadFile(f)
  if err != nil { log.Fatalf("can't open %q", f) }
  if !bytes.Equal(get, want) {
	  t.Errorf("%s:\nget:\n%s\nwant:\n%s\n",
		  test, string(get), string(want))
  }
#+end_src
#+begin_src latex
  We import \ty{log}, \ty{ioutil}, \ty{strconv}, \ty{runtime}, and
  \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:pl}>>=
  "log"
  "io/ioutil"
  "strconv"
  "runtime"
  "bytes"
#+end_src
