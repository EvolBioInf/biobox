#+begin_src latex
  \section*{Introduction}
  Compression works best on runs of small integers, like zeros and
  ones. However, zeros and ones don't directly correspond to
  residues. Moreover, we'd like to transform runs of any kind of
  residue to runs of zeros.

  To do this, we start from a text, for example
  \begin{center}
    \ty{TTTCCCAAAGGG}
  \end{center}
  This implies an alphabet, where each of the characters in the text is
  associated with a number:
  \begin{center}
    \begin{tabular}{c|c}
      Residue & Number\\\hline
      \ty{A} & 0\\
      \ty{C} & 1\\
      \ty{G} & 2\\
      \ty{T} & 3
    \end{tabular}
  \end{center}
  We start enoding the first \ty{T}. It corresponds to number 3 in the
  alphabet. Then we move the \ty{T} to the front of the alphabet to get
  \begin{center}
    \begin{tabular}{c|c}
      Residue & Number\\\hline
      \ty{T} & 0\\
      \ty{A} & 1\\
      \ty{C} & 2\\
      \ty{G} & 3
    \end{tabular}
  \end{center}
  The next residue is another \ty{T}, this time encoded as 0. The
  alphabet remains unchanged until we encounter the \ty{C}, a 2, but
  next a 0, and so on. The transformed text is
  \[
  3\ 0\ 0\ 2\ 0\ 0\ 2\ 0\ 0\ 3\ 0\ 0
  \]

  Not surprisingly, this technique is called ``move to front''. Its
  defining characteristic is that it transforms runs of \emph{any}
  character into runs of zeros.~\cite{bur94:blo}. Move to front is
  reversible using the same reasoning. We start from the original
  alphabet and a sequence of integers, say that above. The initial 3
  corresponds to \ty{T}. Then we move the \ty{T} to front, find another
  \ty{T} for 0, and so on.

  The program \ty{mtf} reads a text in FASTA format and encodes it as
  blank-separated integers by move to front. It stores the alphabet as
  the last field in the FASTA header of its output. It can also reverse
  this step and decode the output of a previous \ty{mtf} step.

  \section*{Implementation}
  Our outline of \ty{mtf} has hooks for imports, functions, and the
  logic of the main function.
#+end_src
#+begin_src go <<mtf.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:mt}>>
  )
  //<<Functions, Ch.~\ref{ch:mt}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:mt}>>
  }
#+end_src
#+begin_src latex
  In the main function, we set the usage, declare the options, parse the
  options, and parse the input files.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:mt}>>=
  //<<Set usage, Ch.~\ref{ch:mt}>>
  //<<Declare options, Ch.~\ref{ch:mt}>>
  //<<Parse options, Ch.~\ref{ch:mt}>>
  //<<Parse input files, Ch.~\ref{ch:mt}>>
#+end_src
#+begin_src latex
  The usage consists of the actual usage message, an explanation of the
  purpose of \ty{mtf}, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:mt}>>=
  u := "mtf [-h] [option]... [foo.fasta]..."
  p := "Perform move to front encoding and decoding."
  e := "mtf -d encoded.fasta"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  As options we declare the version, \ty{-v}, and decoding, \ty{-d}.
#+end_src
#+begin_src go <<Declare options, Ch.~\ref{ch:mt}>>=
  var optV = flag.Bool("v", false, "version")
  var optD = flag.Bool("d", false, "decode")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and respond to \ty{-v} as this stops the
  program.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:mt}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("mtf")
  }
#+end_src
#+begin_src latex
  We import \ty{util}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "github.com/evolbioinf/biobox/util"
  "log"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are taken as the names of
  input files. Each file is scanned with the function \ty{scan}, which
  takes as argument the decoding switch, \ty{-d}.
#+end_src
#+begin_src go <<Parse input files, Ch.~\ref{ch:mt}>>=
  files := flag.Args()
  clio.ParseFiles(files, scan, *optD)
#+end_src
#+begin_src latex
  Inside scan, we retrieve the decoding option. Then we declare the
  alphabet, which we still have to actually determine, and go on to
  either decode or encode the FASTA formatted input.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:mt}>>=
  func scan(r io.Reader, args ...interface{}) {
	  dec := args[0].(bool)
	  var alphabet []byte
	  if dec {
		  //<<Decode, Ch.~\ref{ch:mt}>>
	  } else {
		  //<<Encode, Ch.~\ref{ch:mt}>>
	  }
  }
#+end_src
#+begin_src latex
  We import \ty{io}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "io"
#+end_src
#+begin_src latex
  When decoding, we expect rows of blank-separated integers as input,
  separated by FASTA headers.
#+end_src
#+begin_src go <<Decode, Ch.~\ref{ch:mt}>>=
  var seq []byte
  first := true
  header := ""
  sc := bufio.NewScanner(r)
  for sc.Scan() {
	  if sc.Text()[0] == '>' {
		  //<<Deal with header in decoding, Ch.~\ref{ch:mt}>>
	  } else {
		  //<<Deal with data in decoding, Ch.~\ref{ch:mt}>>
	  }
  }
  //<<Deal with last sequence in decoding, Ch.~\ref{ch:mt}>>
#+end_src
#+begin_src latex
  We import \ty{bufio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "bufio"
#+end_src
#+begin_src latex
  The first header is just noted. Subsequent headers close a previous
  sequence, so we print the sequence decoded thus far, print it, and
  reset it.
#+end_src
#+begin_src go <<Deal with header in decoding, Ch.~\ref{ch:mt}>>=
  //<<Get alphabet from header, Ch.~\ref{ch:mt}>>
  if first {
	  first = false
  } else {
	  s := fasta.NewSequence(header, seq)
	  fmt.Println(s)
	  seq = seq[:0]
  }
  header = sc.Text()[1:] + " - decoded"
#+end_src
#+begin_src latex
  We import \ty{fasta} and \ty{fmt}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "github.com/evolbioinf/fasta"
  "fmt"
#+end_src
#+begin_src latex
  The last field in the header contains the alphabet. This is surrounded
  by quotes, which we remove.
#+end_src
#+begin_src go <<Get alphabet from header, Ch.~\ref{ch:mt}>>=
  fields := strings.Fields(sc.Text())
  al := fields[len(fields)-1]
  al = al[1:len(al)-1]
  for _, c := range al {
	  alphabet = append(alphabet, byte(c))
  }
#+end_src
#+begin_src latex
  A row of data consists of strings representing integers. We convert
  them to actual integers and iterate over them.
#+end_src
#+begin_src go <<Deal with data in decoding, Ch.~\ref{ch:mt}>>=
  fields := strings.Fields(sc.Text())
  for _, field := range fields {
	  i, err := strconv.Atoi(field)
	  if err != nil { log.Fatalf("can't convert %q", field) }
	  r, err := decode(i, alphabet)
	  if err == nil {
		  seq = append(seq, r)
	  } else { log.Fatalf(err.Error()) }
  }
#+end_src
#+begin_src latex
  We import \ty{strings}, \ty{strconv}, and \ty{log}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:mt}>>=
  "strings"
  "strconv"
  "log"
#+end_src
#+begin_src latex
  In the function \ty{decode}, we decode the string representing an
  integer and rearrange the alphabet.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:mt}>>=
  func decode(k int, a []byte) (byte, error) {
	  for i, c := range a {
		  if i == k {
			  copy(a[1:], a[:i])
			  a[0] = c
			  return c, nil
		  }
	  }
	  return 0, fmt.Errorf("can't decode %d", k)
  }
#+end_src
#+begin_src latex
  We print the last sequence in the file.
#+end_src
#+begin_src go <<Deal with last sequence in decoding, Ch.~\ref{ch:mt}>>=
  s := fasta.NewSequence(header, seq)
  fmt.Println(s)
  seq = seq[:0]
#+end_src
#+begin_src latex
  For encoding, we deduce the alphabet from the sequence, encode the
  sequence, and print it.
#+end_src
#+begin_src go <<Encode, Ch.~\ref{ch:mt}>>=
  sc := fasta.NewScanner(r)
  var ns []int
  for sc.ScanSequence() {
	  seq := sc.Sequence()
	  //<<Get alphabet from sequence, Ch.~\ref{ch:mt}>>
	  //<<Encode sequence, Ch.~\ref{ch:mt}>>
	  //<<Print encoded sequence, Ch.~\ref{ch:mt}>>
	  ns = ns[:0]
  }
#+end_src
#+begin_src latex
  To construct the alphabet, we keep track of the distinct characters in
  the data using a map. Having established the alphabet, we keep a copy
  of its original order, before any move to front has occurred. This is
  later used for decoding.
#+end_src
#+begin_src go <<Get alphabet from sequence, Ch.~\ref{ch:mt}>>=
  cm := make(map[byte]bool)
  data := seq.Data()
  for _, c := range data {
	  if !cm[c] {
		  alphabet = append(alphabet, c)
		  cm[c] = true
	  }
  }
  oa := string(alphabet)
#+end_src
#+begin_src latex
  We iterate over the residues (or characters) and encode each one as an integer.
#+end_src
#+begin_src go <<Encode sequence, Ch.~\ref{ch:mt}>>=
  for _, c := range data {
	  i, err := encode(c, alphabet)
	  if err == nil {
		  ns = append(ns, i)
	  } else { log.Fatalf(err.Error()) }
  }
#+end_src
#+begin_src latex
  We encode a byte into an integer. If we can't find the character
  submitted, we throw an error.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:mt}>>=
  func encode(c byte, a []byte) (int, error) {
	  for i, x := range a {
		  if x == c {
			  copy(a[1:], a[:i])
			  a[0] = c
			  return i, nil
		  }
	  }
	  return -1, fmt.Errorf("can't encode %q", c)
  }
#+end_src
#+begin_src latex
  We print an encoded sequence as a FASTA header with the original
  alphabet as the last field, followed by rows of integers separated by
  blanks.
#+end_src
#+begin_src go <<Print encoded sequence, Ch.~\ref{ch:mt}>>=
  fmt.Printf(">%s - mtf %q\n", seq.Header(), oa)
  ll := fasta.DefaultLineLength
  n := len(ns)
  for i := 0; i < n; i += ll {
	  for j := 0; i+j < n && j < ll; j++ {
		  if j > 0 { fmt.Printf(" ") }
		  fmt.Printf("%d", ns[i+j])
	  }
	  fmt.Printf("\n")
  }
#+end_src
#+begin_src latex
  We've finished writing \ty{mtf}, let's test it.
  \section*{Testing}
  The outline of our testing code contains hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<mtf_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:mt}>>
  )
  func TestMtf(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:mt}>>
  }
#+end_src
#+begin_src latex
  We construct the tests and run them.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:mt}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Ch.~\ref{ch:mt}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:mt}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:mt}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We run two tests, one for encoding, the second for decoding. The input
  for encoding is \ty{t1.fasta}, the input for decoding the output from
  encoding, \ty{r1.fasta}.
#+end_src
#+begin_src go <<Construct tests, Ch.~\ref{ch:mt}>>=
  test := exec.Command("./mtf", "t1.fasta")
  tests = append(tests, test)
  test = exec.Command("./mtf", "-d", "r1.fasta")
  tests = append(tests, test)
#+end_src
#+begin_src latex
  When running a test, we compare the result we get with the result we
  want, which is stored in \ty{r1.fasta} and \ty{r2.fasta}.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:mt}>>=
  get, err := test.Output()
  if err != nil { t.Errorf("can't run %q", test) }
  f := "r" + strconv.Itoa(i+1) + ".fasta"
  want, err := ioutil.ReadFile(f)
  if err != nil { t.Errorf("can't open %q", f) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:mt}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src
