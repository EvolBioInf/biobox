#+begin_src latex
  \section*{Introduction}
  Given two sequences of a single nucleotide, $S_1=\texttt{A}$ and
  $S_2=\texttt{T}$, there are three possible alignments:
  \begin{center}
    \begin{tabular}{ccc}
      \begin{tabular}{c}
	\verb+-+\\
	\verb+T+
    \end{tabular}
    &
      \begin{tabular}{c}
	\verb+A+\\
	\verb+-+
    \end{tabular}
    &
      \begin{tabular}{c}
	\verb+A+\\
	\verb+T+
    \end{tabular}
    \end{tabular}
  \end{center}
  Since every alignment of two sequences ends in one of these three
  configurations---gap/residue, residue/gap, or residue/residue---the
  number of possible global alignments of two sequences of lengths $m$
  and $n$ can be expressed recursively as the sum of three
  terms~\cite[p.32f]{hau17:bio}: The number of global alignments between
  sequences of lengths $m-1$ and $n$, between sequences of lengths $m$
  and $n-1$, and between sequences of lengths $m-1$, $n-1$:
  \begin{equation}\label{eq:numAl}
    f(m,n)=f(m-1,n)+f(m,n-1)+f(m-1,n-1)
  \end{equation}
  Perhaps confusingly, the same function, $f$, appears on the left and
  the right of this equation. Such self-referential equations are called
  \emph{recursions}. To prevent them from going on for ever, they need a
  stopping criterion. In our case, whenever one of the sequences has
  length zero, that is, consists only of gaps, there is only one
  possible alignment,
  \begin{equation}\label{eq:numAlBound}
  f(m,0)=f(0,n)=f(0,0)=1.
  \end{equation}
  This is the stopping criterion, or boundary condition, for our
  recursion.

  There are two ways to compute $f(m,n)$, top down by direct recursion,
  and bottom up by working from the boundary conditions and saving the
  intermediate results. Say, we wish to compute $f(2,3)$; we begin by
  writing down a programming matrix of $(m+1)\times(n+1)$ cells:
  \begin{center}
    \begin{tabular}{c|cccc}
      & 0 & 1 & 2 & 3\\\hline
    0 &  &  &  &\\ 
    1 &  &  &  & \\
    2 &  &  &  & \\
    \end{tabular}
  \end{center}
  We initialize the matrix according to the boundary condition by
  filling the first row and column with 1:
  \begin{center}
    \begin{tabular}{c|cccc}
      & 0 & 1 & 2 & 3\\\hline
    0 & 1 & 1 & 1 & 1\\ 
    1 & 1 &  &  & \\
    2 & 1 &  &  & \\
    \end{tabular}
  \end{center}
  Then we fill-in the remaining blanks by summing their three neighbors:
  \begin{center}
    \begin{tabular}{c|cccc}
      & 0 & 1 & 2 & 3\\\hline
    0 & 1 & 1 & 1 & 1\\ 
    1 & 1 & 3 & 5 & 7\\
    2 & 1 & 5 & 13 & 25\\
    \end{tabular}
  \end{center}
  The number of global alignments between two sequences of lengths 2 and
  3 is the entry in the bottom right-hand corner, 25.  The program
  \texttt{numAl} implements this bottom-up method as its default. The
  run-time of the top-down method is proportional to its result, which
  quickly becomes very large with longer sequences. We include it to
  demonstrate the value of the bottom-up approach when solving
  recursions. By way of demonstration the user can also print the data
  structure underlying the chosen computation, the recursion tree or the
  programming matrix.
  \section*{Implementation}
  The program layout contains hooks for imports, types, variables,
  functions, and the logic of the main function.
#+end_src
#+begin_src go <<numAl.go>>=
  package main

  import (
	  //<<Imports, Ch.~\ref{ch:num}>>
  )
  //<<Types, Ch.~\ref{ch:num}>>
  //<<Variables, Ch.~\ref{ch:num}>>
  //<<Functions, Ch.~\ref{ch:num}>>
  func main() {
	  //<<Main function, Ch.~\ref{ch:num}>>
  }
#+end_src
#+begin_src latex
  In the main function we prepare the \ty{log} package, set the usage,
  parse the options, and compute the number of alignments or print the
  data structure underlying the computation.
#+end_src
#+begin_src go <<Main function, Ch.~\ref{ch:num}>>=
  util.PrepLog("numAl")
  //<<Set usage, Ch.~\ref{ch:num}>>
  //<<Parse options, Ch.~\ref{ch:num}>>
  if !*optP {
	  //<<Compute number of alignments, Ch.~\ref{ch:num}>>
  } else {
	  //<<Print data structure, Ch.~\ref{ch:num}>>
  }
#+end_src
#+begin_export latex
We import \ty{util}.
#+end_export
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "github.com/evolbioinf/biobox/util"
#+end_src
#+begin_src latex
  The usage consists of the usage message itself, a statement of the
  program's purpose, and an example command.
#+end_src
#+begin_src go <<Set usage, Ch.~\ref{ch:num}>>=
  u := "numAl [-h] [options] m n"
  p := "Compute the number of possible global alignments " +
	  "between two sequences of lengths m and n"
  e := "numAl 5 10"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import the package \texttt{clio}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  As to options, there is the standard version switch, \texttt{-v}. In
  addition, the user can request top-down computation instead of
  bottom-up (\texttt{-t}).
#+end_src
#+begin_src go <<Variables, Ch.~\ref{ch:num}>>=
  var optV = flag.Bool("v", false, "version")
  var optT = flag.Bool("t", false, "top-down (default bottom-up)")
  var optP = flag.Bool("p", false, "print data structure (default result)")
#+end_src
#+begin_src latex
  We import \texttt{flag}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the flags, check for version printing, extract the sequence
  lengths, and warn the user if one or both of them are missing.
#+end_src
#+begin_src go <<Parse options, Ch.~\ref{ch:num}>>=
  flag.Parse()
  if *optV {
	  util.PrintInfo("numAl")
  }
  args := flag.Args()
  if len(args) < 2 {
	  fmt.Fprintf(os.Stderr, "please provide two " +
		  "sequence lengths\n")
	  os.Exit(0)
  }
  //<<Convert lengths, Ch.~\ref{ch:num}>>
#+end_src
#+begin_src latex
  We import \texttt{fmt} and \texttt{os}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "fmt"
  "os"
#+end_src
#+begin_src latex
  Conversion of the arguments is accompanied by error checking.
#+end_src
#+begin_src go <<Convert lengths, Ch.~\ref{ch:num}>>=
  m, err := strconv.Atoi(args[0])
  if err != nil {
	  fmt.Fprintf(os.Stderr, "couldn't convert %q\n", args[0])
	  os.Exit(0)
  }
  n, err := strconv.Atoi(args[1])
  if err != nil {
	  fmt.Fprintf(os.Stderr, "couldn't convert %q\n", args[1])
	  os.Exit(0)
  }
#+end_src
#+begin_src latex
  We import \texttt{strconv}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "strconv"
#+end_src
#+begin_src latex
  The actual computation depends on whether top-down or bottom-up is
  requested. We time this part of the program to show what a difference
  algorithms can make.
#+end_src
#+begin_src go <<Compute number of alignments, Ch.~\ref{ch:num}>>=
  var du time.Duration
  var na float64
  start := time.Now()
  if *optT {
	  na = topDown(m, n)
  } else {
	  mat := bottomUp(m, n)
	  na = mat[m][n]
  }
  end := time.Now()
  du = end.Sub(start)
  fmt.Printf("f(%d, %d) = %g (%g s)\n", m, n, na, du.Seconds())
#+end_src
#+begin_src latex
  We import \texttt{time}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "time"
#+end_src
#+begin_src latex
  For the top-down approach we simply rephrase
  equations~(\ref{eq:numAl}) and (\ref{eq:numAlBound}).
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:num}>>=
  func topDown(m, n int) float64 {
	  if m > 0 && n > 0 {
		  r := topDown(m-1, n) + topDown(m, n-1) +
			  topDown(m-1, n-1)
		  return r
	  } else {
		  return 1.0
	  }
  }
#+end_src
#+begin_src latex
  In the bottom-up calculation, we construct a matrix, initialize it,
  fill it in, and return it.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:num}>>=
  func bottomUp(m, n int) [][]float64 {
	  var mat [][]float64
	  //<<Construct matrix, Ch.~\ref{ch:num}>>
	  //<<Initialize matrix, Ch.~\ref{ch:num}>>
	  //<<Fill-in matrix, Ch.~\ref{ch:num}>>
	  return mat
  }
#+end_src
#+begin_src latex
  The matrix is constructed as a slice of slices.
#+end_src
#+begin_src go <<Construct matrix, Ch.~\ref{ch:num}>>=
  mat = make([][]float64, m+1)
  for i := 0; i <= m; i++ {
	  mat[i] = make([]float64, n+1)
  }
#+end_src
#+begin_src latex
  We fill the first row and column with 1's.
#+end_src
#+begin_src go <<Initialize matrix, Ch.~\ref{ch:num}>>=
  for i := 0; i <= m; i++ {
	  mat[i][0] = 1
  }
  for i := 1; i <= n; i++ {
	  mat[0][i] = 1
  }
#+end_src
#+begin_src latex
  We fill-in the rest of the matrix.
#+end_src
#+begin_src go <<Fill-in matrix, Ch.~\ref{ch:num}>>=
  for i := 1; i <= m; i++ {
	  for j := 1; j <= n; j++ {
		  mat[i][j] = mat[i-1][j] +
			  mat[i][j-1] +
			  mat[i-1][j-1]
	  }
  }
#+end_src
#+begin_src latex
  Instead of calculating and printing the result, we can also print the
  data structure used in the calculation. This is either the recursion
  tree or the programming matrix.
#+end_src
#+begin_src go <<Print data structure, Ch.~\ref{ch:num}>>=
  if *optT {
	  //<<Print recursion tree, Ch.~\ref{ch:num}>>
  } else {
	  mat := bottomUp(m, n)
	  //<<Print programming matrix, Ch.~\ref{ch:num}>>
  }
#+end_src
#+begin_src latex
  We print the recursion tree as a graph in dot notation. This has a
  header, a main body generated by calling a recursion, and a footer.
#+end_src
#+begin_src go <<Print recursion tree, Ch.~\ref{ch:num}>>=
  //<<Print graph header, Ch.~\ref{ch:num}>>
  r := newNode(m, n)
  printTopDown(r)
  //<<Print graph footer, Ch.~\ref{ch:num}>>
#+end_src
#+begin_src latex
  We start the header with a comment saying where the graph comes from
  and how it can be rendered. Then we declare a directed graph, declare
  the nodes as points and remove the arrow heads from the edges.
#+end_src
#+begin_src go <<Print graph header, Ch.~\ref{ch:num}>>=
  fmt.Println("# Recursion tree for computing the number of alignments.")
  fmt.Println("# Generated with numAl, render with")
  fmt.Println("# $ dot -T x11 foo.dot")
  fmt.Println("digraph g {")
  fmt.Println("\tnode[shape=point]")
  fmt.Println("\tedge[arrowhead=none]")
#+end_src
#+begin_src latex
  A node in the recursion tree has a value for $m$, $n$, and an identifier.
#+end_src
#+begin_src go <<Types, Ch.~\ref{ch:num}>>=
  type node struct {
	  m, n, i int
  }
#+end_src
#+begin_src latex
  A new node is created as a function of $m$ and $n$. It is also
  assigned a unique identifier.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:num}>>=
  func newNode(m, n int) *node {
	  v := new(node)
	  v.m = m
	  v.n = n
	  v.i = nodeId
	  nodeId++
	  return v
  }
#+end_src
#+begin_src latex
  We declare \ty{nodeId} as a global variable.
#+end_src
#+begin_src go <<Variables, Ch.~\ref{ch:num}>>=
  var nodeId int
#+end_src
#+begin_src latex
  In the recursion we check whether we've reached a leaf. If not, we
  create three children, print them, and recurse into them.
#+end_src
#+begin_src go <<Functions, Ch.~\ref{ch:num}>>=
  func printTopDown(v *node) {
	  if v.m == 0 || v.n == 0 { return }
	  c1 := newNode(v.m-1, v.n)
	  c2 := newNode(v.m, v.n-1)
	  c3 := newNode(v.m-1, v.n-1)
	  fmt.Printf("\tn%d->n%d\n", v.i, c1.i)
	  fmt.Printf("\tn%d->n%d\n", v.i, c2.i)
	  fmt.Printf("\tn%d->n%d\n", v.i, c3.i)
	  printTopDown(c1)
	  printTopDown(c2)
	  printTopDown(c3)
  }
#+end_src
#+begin_src latex
  The graph footer us just a closing curly bracket.
#+end_src
#+begin_src go <<Print graph footer, Ch.~\ref{ch:num}>>=
  fmt.Println("}")
#+end_src
#+begin_src latex
  The programming matrix is a table, so we print it using a
  \ty{tabwriter}. First we print the first row of the programming
  matrix, then its remainder. At the end we flush the writer.
#+end_src
#+begin_src go <<Print programming matrix, Ch.~\ref{ch:num}>>=
  w := tabwriter.NewWriter(os.Stdout, 1, 1, 1, ' ',
	  tabwriter.AlignRight)
  //<<Print first row of programming matrix, Ch.~\ref{ch:num}>>
  //<<Print rest of progamming matrix, Ch.~\ref{ch:num}>>
  w.Flush()
#+end_src
#+begin_src latex
  We import \ty{tabwriter}.
#+end_src
#+begin_src go <<Imports, Ch.~\ref{ch:num}>>=
  "text/tabwriter"
#+end_src
#+begin_src latex
  The first row of the programming matrix are its column indexes.
#+end_src
#+begin_src go <<Print first row of programming matrix, Ch.~\ref{ch:num}>>=
  for i := 0; i <= n; i++ {
	  fmt.Fprintf(w, "\t%d", i)
  }
  fmt.Fprintf(w, "\t\n")
#+end_src
#+begin_src latex
  We print the rest of the matrix.
#+end_src
#+begin_src go <<Print rest of progamming matrix, Ch.~\ref{ch:num}>>=
  for i := 0; i <= m; i++ {
	  fmt.Fprintf(w, "%d", i)
	  for j := 0; j <= n; j++ {
		  fmt.Fprintf(w, "\t%d", int(mat[i][j]))
	  }
	  fmt.Fprintf(w, "\t\n")
  }
#+end_src


#+begin_src latex
  We're done writing \texttt{numAl}, here comes the test.
  \section*{Testing}
  The testing outline contains hooks for imports and the testing logic
  itself.
#+end_src
#+begin_src go <<numAl_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch.~\ref{ch:num}>>
  )

  func TestNumAl(t *testing.T) {
	  //<<Testing, Ch.~\ref{ch:num}>>
  }
#+end_src
#+begin_src latex
  We construct a set of tests and run them.
#+end_src
#+begin_src go <<Testing, Ch.~\ref{ch:num}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Ch.~\ref{ch:num}>>
  for i, test := range tests {
	  //<<Run test, Ch.~\ref{ch:num}>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:num}>>=
  "os/exec"
#+end_src
#+begin_src latex
  We construct four tests, bottom up, top down, and both with printing.
#+end_src
#+begin_src go <<Construct tests, Ch.~\ref{ch:num}>>=
  test := exec.Command("./numAl", "10", "10")
  tests = append(tests, test)
  test = exec.Command("./numAl", "-t", "10", "10")
  tests = append(tests, test)
  test = exec.Command("./numAl", "-p", "3", "3")
  tests = append(tests, test)
  test = exec.Command("./numAl", "-p", "-t", "3", "3")
  tests = append(tests, test)
#+end_src
#+begin_src latex 
  We run a test and compare the result we get with the result we want,
  which is stored in files \ty{r1.txt}, \ty{r2.txt}, and so on. The
  first two test cases include time measurements in their output. This
  cannot be reproduced reliably, so we cut it off.
#+end_src
#+begin_src go <<Run test, Ch.~\ref{ch:num}>>=
  get, err := test.Output()
  if i < 2 { get = get[:24] }
  if err != nil {	t.Errorf("couldn't run %q", test) }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil { t.Errorf("couldn't open %q", f) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports, Ch.~\ref{ch:num}>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src
